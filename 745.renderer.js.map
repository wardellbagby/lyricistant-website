{"version":3,"file":"745.renderer.js","mappings":"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","sources":["webpack://lyricistant/webpack/runtime/chunk loaded","webpack://lyricistant/webpack/runtime/create fake namespace object","webpack://lyricistant/webpack/runtime/startup chunk dependencies","webpack://lyricistant/./apps/web/packages/platform/renderer.ts","webpack://lyricistant/./packages/core-dom-platform/main/platform/DOMLogger.ts","webpack://lyricistant/./packages/core-dom-platform/main/Delegates.ts","webpack://lyricistant/./apps/web/packages/platform/RendererDelegate.ts","webpack://lyricistant/./apps/web/packages/platform/implementations/WebLogger.ts","webpack://lyricistant/./apps/web/packages/platform/implementations/WebPreferences.ts","webpack://lyricistant/./apps/web/packages/platform/implementations/WebRecentFiles.ts","webpack://lyricistant/./apps/web/packages/platform/implementations/WebAppData.ts","webpack://lyricistant/./apps/web/packages/platform/implementations/WebFiles.ts","webpack://lyricistant/./packages/common/main/theme/SystemTheme.ts","webpack://lyricistant/./packages/core-dom-platform/main/platform/DOMSystemThemeProvider.ts","webpack://lyricistant/./packages/core-dom-platform/main/platform/DOMBuffers.ts","webpack://lyricistant/./packages/core-dom-platform/main/platform/DOMTimes.ts","webpack://lyricistant/./packages/common/main/dialogs/Dialog.ts","webpack://lyricistant/./packages/common-platform/main/Manager.ts","webpack://lyricistant/./packages/common-platform/main/files/UnsavedDataManager.ts","webpack://lyricistant/./packages/core-dom-platform/main/platform/UnloadManager.ts","webpack://lyricistant/./packages/common/main/Cancellable.ts","webpack://lyricistant/./packages/common/main/preferences/PreferencesData.ts","webpack://lyricistant/./packages/common-platform/main/preferences/Preferences.ts","webpack://lyricistant/./packages/common-platform/main/files/FileManager.ts","webpack://lyricistant/./packages/common-platform/main/preferences/PreferenceManager.ts","webpack://lyricistant/./packages/common-platform/main/ui/UiConfigManager.ts","webpack://lyricistant/./packages/common-platform/main/logging/LogManager.ts","webpack://lyricistant/./packages/common-platform/main/history/FileHistoryManager.ts","webpack://lyricistant/./packages/common-platform/main/firstlaunch/FirstLaunchManager.ts","webpack://lyricistant/./packages/common-platform/main/time/Clock.ts","webpack://lyricistant/./packages/common-platform/main/files/Files.ts","webpack://lyricistant/./packages/common-platform/main/files/handlers/LyricistantFileHandler.ts","webpack://lyricistant/./packages/common-platform/main/files/handlers/TextFileHandler.ts","webpack://lyricistant/./packages/common-platform/main/files/extensions/FileDataExtension.guard.ts","webpack://lyricistant/./packages/common-platform/main/history/ChunkCreation.ts","webpack://lyricistant/./packages/common-platform/main/time/Formats.ts","webpack://lyricistant/./packages/common-platform/main/history/FileHistory.ts","webpack://lyricistant/./packages/common-platform/main/files/extensions/FileDataExtension.ts","webpack://lyricistant/./packages/common-platform/main/AppComponents.ts","webpack://lyricistant/./packages/core-dom-platform/main/platform/UiConfigProvider.ts","webpack://lyricistant/./apps/web/packages/platform/AppComponent.ts","webpack://lyricistant/./apps/web/packages/platform/index.ts","webpack://lyricistant/webpack/bootstrap","webpack://lyricistant/webpack/runtime/compat get default export","webpack://lyricistant/webpack/runtime/define property getters","webpack://lyricistant/webpack/runtime/ensure chunk","webpack://lyricistant/webpack/runtime/get javascript chunk filename","webpack://lyricistant/webpack/runtime/global","webpack://lyricistant/webpack/runtime/hasOwnProperty shorthand","webpack://lyricistant/webpack/runtime/make namespace object","webpack://lyricistant/webpack/runtime/publicPath","webpack://lyricistant/webpack/runtime/importScripts chunk loading","webpack://lyricistant/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(313).then(next);\n};","import { Renderer } from '@web-common/Renderer';\nimport { wrap } from 'comlink';\n\n// TODO Webpack sometimes thinks self is a Window instead of a\n// WorkerGlobalScope. Figure out why that happens.\n\nexport const renderer: Renderer = wrap(self as any);\n","/* eslint-disable no-console */\nimport { PlatformLogger } from '@lyricistant/common-platform/logging/PlatformLogger';\nimport { DateTime } from 'luxon';\nimport { Subject } from 'rxjs';\nimport { bufferCount, map } from 'rxjs/operators';\nimport { sprintf } from 'sprintf-js';\n\n// TODO Stop storing log messages in global state like this and migrate to Clock.\nexport class DOMLogger implements PlatformLogger {\n  public debug(message: string, ...args: any[]): void {\n    console.debug(message, ...args);\n    logMessages.next(['debug', message, args]);\n  }\n\n  public error(message: string, ...args: any[]): void {\n    console.error(message, ...args);\n    logMessages.next(['error', message, args]);\n  }\n\n  public verbose(message: string, ...args: any[]): void {\n    console.log(message, ...args);\n    logMessages.next(['verbose', message, args]);\n  }\n\n  public warn(message: string, ...args: any[]): void {\n    console.warn(message, ...args);\n    logMessages.next(['warn', message, args]);\n  }\n\n  public info(message: string, ...args: any[]): void {\n    console.info(message, ...args);\n    logMessages.next(['info', message, args]);\n  }\n\n  public async getPrintedLogs() {\n    logMessages.complete();\n    const logs = getLogs();\n    logMessages = new Subject();\n    return logs;\n  }\n}\n\nlet logMessages = new Subject<[string, string, any[]]>();\nlogMessages\n  .pipe(\n    map((messageParts) => toDownloadableLogMessage(...messageParts)),\n    bufferCount(25)\n  )\n  .subscribe((messages) => {\n    logToSessionStorage(messages);\n  });\n\nconst logFormatTemplate = '[%(date)s] [%(level)s] %(text)s\\n';\nconst format = 'yyyy-MM-dd hh:mm.u';\nconst toDownloadableLogMessage = (\n  level: string,\n  message: string,\n  ...args: any[]\n) => {\n  const date = DateTime.local().toFormat(format);\n  const text = `${message} ${args.map((arg) => JSON.stringify(arg)).join(' ')}`;\n  return sprintf(logFormatTemplate, {\n    date,\n    level,\n    text,\n  });\n};\nconst getLogs = (): string[] =>\n  JSON.parse(sessionStorage.getItem('logs') ?? '[]');\n\nconst logToSessionStorage = (messages: string[]) => {\n  const currentLogs: string[] = getLogs();\n  currentLogs.push(...messages);\n  sessionStorage.setItem('logs', JSON.stringify(currentLogs));\n};\n","import {\n  PlatformDelegate,\n  RendererDelegate,\n} from '@lyricistant/common/Delegates';\nimport { Logger } from '@lyricistant/common/Logger';\nimport { DOMLogger } from '@lyricistant/core-dom-platform/platform/DOMLogger';\n\nconst logger: Logger = new DOMLogger();\n\nclass DOMPlatformDelegate implements PlatformDelegate {\n  public send(channel: string, ...args: any[]) {\n    logger.info('Sending data to platform', { channel, args });\n    queue(rendererListeners.getListeners(channel), args);\n  }\n\n  public on(channel: string, listener: (...args: any[]) => void): this {\n    logger.info('Registering renderer listener', { channel });\n    platformListeners.addListener(channel, listener);\n    newRendererListenerListeners.get(channel)?.forEach((value) => value());\n    return this;\n  }\n\n  public removeListener(\n    channel: string,\n    listener: (...args: any[]) => void\n  ): this {\n    logger.info('Removing renderer listener', { channel });\n    platformListeners.removeListener(channel, listener);\n    return this;\n  }\n}\n\nexport class DOMRendererDelegate implements RendererDelegate {\n  public send(channel: string, ...args: any[]) {\n    logger.info('Sending data to renderer', { channel, args });\n    queue(platformListeners.getListeners(channel), args);\n  }\n\n  public on(channel: string, listener: (...args: any[]) => void): this {\n    logger.info('Registering platform listener', { channel });\n    rendererListeners.addListener(channel, listener);\n    return this;\n  }\n\n  public addRendererListenerSetListener(\n    channel: string,\n    listener: () => void\n  ): void {\n    const listeners = newRendererListenerListeners.get(channel) ?? [];\n    listeners.push(listener);\n    newRendererListenerListeners.set(channel, listeners);\n  }\n\n  public removeListener(\n    channel: string,\n    listener: (...args: any[]) => void\n  ): this {\n    logger.info('Removing platform listener', { channel });\n    rendererListeners.removeListener(channel, listener);\n    return this;\n  }\n}\n\nexport class ListenerManager {\n  private listeners: Map<string, Array<(...args: any[]) => void>> = new Map();\n\n  public addListener(\n    channel: string,\n    listener: (...args: any[]) => void\n  ): void {\n    const registeredListeners = this.getListeners(channel);\n    registeredListeners.push(listener);\n\n    this.listeners.set(channel, registeredListeners);\n  }\n\n  public removeListener(\n    channel: string,\n    listener: (...args: any[]) => void\n  ): void {\n    const registeredListeners = this.getListeners(channel);\n    registeredListeners.splice(registeredListeners.indexOf(listener), 1);\n\n    this.listeners.set(channel, registeredListeners);\n  }\n\n  public getListeners(channel: string): Array<(...args: any[]) => unknown> {\n    return [...(this.listeners.get(channel) ?? [])];\n  }\n}\n\nconst queue = (functions: Array<(..._: any[]) => void>, args: any[]) => {\n  args.forEach((arg) => {\n    if (isError(arg)) {\n      logger.error(arg.message, arg);\n    }\n  });\n\n  functions.forEach((listener) => listener(...args));\n};\n\nconst isError = (e: any) => e instanceof Error;\n\nconst platformListeners: ListenerManager = new ListenerManager();\nconst rendererListeners: ListenerManager = new ListenerManager();\nconst newRendererListenerListeners = new Map<string, Array<() => void>>();\n\nexport const platformDelegate: PlatformDelegate = new DOMPlatformDelegate();\n","import {\n  PlatformChannel,\n  PlatformToRendererListener,\n  RendererChannel,\n  RendererDelegate,\n  RendererToPlatformListener,\n} from '@lyricistant/common/Delegates';\nimport { Logger } from '@lyricistant/common/Logger';\nimport { ListenerManager } from '@lyricistant/core-dom-platform/Delegates';\nimport { renderer } from './renderer';\n\nexport class WebRendererDelegate implements RendererDelegate {\n  private listeners: ListenerManager = new ListenerManager();\n  private rendererListenerSetListeners = new Map<string, Array<() => void>>();\n\n  public constructor(private logger: Logger) {}\n\n  public receive = (channel: string, args: any[]) => {\n    this.listeners.getListeners(channel).forEach((listener) => {\n      Promise.resolve(listener(...args)).catch((reason) => {\n        this.logger.error('Uncaught exception in listener', reason);\n        throw reason;\n      });\n    });\n  };\n\n  public on<Channel extends PlatformChannel>(\n    channel: Channel,\n    listener: RendererToPlatformListener[Channel]\n  ): this {\n    this.listeners.addListener(channel, listener);\n    return this;\n  }\n\n  public removeListener<Channel extends PlatformChannel>(\n    channel: Channel,\n    listener: RendererToPlatformListener[Channel]\n  ): this {\n    this.listeners.removeListener(channel, listener);\n    return this;\n  }\n\n  public send<Channel extends RendererChannel>(\n    channel: Channel,\n    ...args: Parameters<PlatformToRendererListener[Channel]>\n  ): void {\n    this.logger.info('Sending data to renderer', { channel, args });\n    renderer.receive(channel, args);\n  }\n\n  public onRendererListenerSet = (channel: string) => {\n    const listeners = this.rendererListenerSetListeners.get(channel) ?? [];\n    listeners.forEach((listener) => listener());\n  };\n\n  public addRendererListenerSetListener = <Channel extends RendererChannel>(\n    channel: Channel,\n    listener: () => void\n  ) => {\n    const listeners = this.rendererListenerSetListeners.get(channel) ?? [];\n    listeners.push(listener);\n    this.rendererListenerSetListeners.set(channel, listeners);\n  };\n}\n","/* eslint-disable no-console */\nimport { PlatformLogger } from '@lyricistant/common-platform/logging/PlatformLogger';\nimport { Clock } from '@lyricistant/common-platform/time/Clock';\nimport { renderer } from '@web-platform/renderer';\nimport { sprintf } from 'sprintf-js';\n\nconst logFormatTemplate = '[%(date)s] [%(level)s] %(text)s';\n\nexport class WebLogger implements PlatformLogger {\n  private messages: string[] = [];\n\n  public constructor(private clock: Clock) {}\n\n  public debug = (message: string, ...args: any[]): void => {\n    console.debug(message, ...args);\n    this.messages.push(this.formatMessage('debug', message, ...args));\n    this.maybeAddToCache();\n  };\n\n  public error = (message: string, ...args: any[]): void => {\n    console.error(message, ...args);\n    this.messages.push(this.formatMessage('error', message, ...args));\n    this.maybeAddToCache();\n  };\n\n  public info = (message: string, ...args: any[]): void => {\n    console.info(message, ...args);\n    this.messages.push(this.formatMessage('info', message, ...args));\n    this.maybeAddToCache();\n  };\n\n  public verbose = (message: string, ...args: any[]): void => {\n    console.debug(message, ...args);\n    this.messages.push(this.formatMessage('verbose', message, ...args));\n    this.maybeAddToCache();\n  };\n\n  public warn = (message: string, ...args: any[]): void => {\n    console.warn(message, ...args);\n    this.messages.push(this.formatMessage('warn', message, ...args));\n    this.maybeAddToCache();\n  };\n\n  public getPrintedLogs = (): Promise<string[]> =>\n    this.flush().then(() => this.getAllLogs());\n\n  public flush = () => this.maybeAddToCache(true);\n\n  private getAllLogs = (): Promise<string[]> =>\n    renderer\n      .getSessionStorage()\n      .then(async (storage) => JSON.parse(await storage.getItem('logs')) ?? []);\n\n  private maybeAddToCache = (force = false) => {\n    if (force || this.messages.length > 25) {\n      return this.getAllLogs().then(async (logs) => {\n        logs.push(...this.messages);\n        this.messages = [];\n        return renderer\n          .getSessionStorage()\n          .then((storage) => storage.setItem('logs', JSON.stringify(logs)));\n      });\n    }\n    return Promise.resolve();\n  };\n\n  private formatMessage = (level: string, message: string, ...args: any[]) => {\n    const date = this.clock.now().formatIso();\n    const text = `${message} ${args\n      .map((arg) => JSON.stringify(arg))\n      .join(' ')}`;\n    return sprintf(logFormatTemplate, {\n      date,\n      level,\n      text,\n    });\n  };\n}\n","import { PreferencesData } from '@lyricistant/common/preferences/PreferencesData';\nimport { Preferences } from '@lyricistant/common-platform/preferences/Preferences';\nimport { renderer } from '@web-platform/renderer';\n\nexport class WebPreferences implements Preferences {\n  private readonly prefsKey = 'lyricistant_preferences';\n  public setPreferences = async (data: PreferencesData) => {\n    const storage = await renderer.getLocalStorage();\n    storage.setItem(this.prefsKey, JSON.stringify(data));\n  };\n  public getPreferences = async () => {\n    const storage = await renderer.getLocalStorage();\n    const savedPrefs = await storage.getItem(this.prefsKey);\n    if (savedPrefs) {\n      return JSON.parse(savedPrefs);\n    } else {\n      return undefined;\n    }\n  };\n}\n","import { RecentFiles } from '@lyricistant/common-platform/files/RecentFiles';\n\nexport class WebRecentFiles implements RecentFiles {\n  public getRecentFiles = (): string[] => [];\n\n  public setRecentFiles = (): void => undefined;\n}\n","import { Serializable } from '@lyricistant/common/Serializable';\nimport { AppData } from '@lyricistant/common-platform/appdata/AppData';\nimport { renderer } from '@web-platform/renderer';\n\nexport class WebAppData implements AppData {\n  public set = (key: string, data: Serializable) => {\n    renderer\n      .getLocalStorage()\n      .then((storage) => storage.setItem(key, JSON.stringify(data)));\n  };\n  public get = async (key: string) => {\n    if (!(await this.exists(key))) {\n      return undefined;\n    }\n    const storage = await renderer.getLocalStorage();\n    return JSON.parse(await storage.getItem(key));\n  };\n\n  public exists = async (key: string) => {\n    const storage = await renderer.getLocalStorage();\n    return !!(await storage.getItem(key));\n  };\n  public delete = (key: string): void => {\n    renderer.getLocalStorage().then((storage) => storage.removeItem(key));\n  };\n}\n","import {\n  FileMetadata,\n  PlatformFile,\n} from '@lyricistant/common/files/PlatformFile';\nimport { Files } from '@lyricistant/common-platform/files/Files';\nimport { renderer } from '@web-platform/renderer';\n\nexport class WebFiles implements Files {\n  private handles = new Map<string, FileSystemFileHandle>();\n  public openFile = async (file?: PlatformFile): Promise<PlatformFile> => {\n    if (file) {\n      this.handles.set(file.metadata.path, file.extras.handle);\n      return file;\n    }\n    const fs = await renderer.getFileSystem();\n    const result = await fs.openFile();\n    if (!result) {\n      return undefined;\n    }\n    const { path, data, handle } = result;\n    this.handles.set(path, handle);\n    return {\n      data,\n      type: '',\n      metadata: {\n        path,\n      },\n    };\n  };\n\n  public saveFile = async (\n    data: ArrayBuffer,\n    defaultFileName: string,\n    path?: string\n  ): Promise<FileMetadata> => {\n    const { handle, cancelled } = await (\n      await renderer.getFileSystem()\n    ).saveFile(data, defaultFileName, this.handles.get(path));\n\n    if (cancelled) {\n      return null;\n    }\n\n    const returnedPath = handle?.name ?? path ?? defaultFileName;\n    if (handle) {\n      this.handles.set(returnedPath, handle);\n    }\n    return {\n      path: returnedPath,\n    };\n  };\n}\n","export enum SystemTheme {\n  Light,\n  Dark,\n}\n\nexport interface Palette {\n  primary: string;\n  background: string;\n  surface: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type SystemPalette = Partial<Palette>;\n","import { SystemTheme } from '@lyricistant/common/theme/SystemTheme';\nimport { SystemThemeProvider } from '@lyricistant/common-platform/theme/SystemThemeProvider';\n\nexport class DOMSystemThemeProvider implements SystemThemeProvider {\n  public onChange = (listener: (theme: SystemTheme) => void) => {\n    setColorSchemeListener(listener);\n  };\n}\n\nexport const setColorSchemeListener = (\n  listener: (theme: SystemTheme) => void\n) => {\n  if (self.matchMedia) {\n    if (self.matchMedia('(prefers-color-scheme: dark)').matches) {\n      listener(SystemTheme.Dark);\n    } else {\n      listener(SystemTheme.Light);\n    }\n  } else {\n    listener(SystemTheme.Dark);\n    return;\n  }\n\n  window\n    .matchMedia('(prefers-color-scheme: dark)')\n    .addEventListener('change', (e) => {\n      listener(e.matches ? SystemTheme.Dark : SystemTheme.Light);\n    });\n};\n","import { Buffers } from '@lyricistant/common-platform/files/Buffers';\n\nconst decoder = new TextDecoder();\nconst encoder = new TextEncoder();\n\nexport class DOMBuffers implements Buffers {\n  public bufferToString = (buffer: ArrayBuffer): string =>\n    decoder.decode(buffer);\n\n  public stringToBuffer = (input: string): ArrayBuffer => encoder.encode(input);\n}\n","import { Times } from '@lyricistant/common-platform/time/Times';\n\nexport class DOMTimes implements Times {\n  public elapsed = (): number => performance.now();\n}\n","export const YES_NO_BUTTONS = ['No', 'Yes'];\nexport type DialogData = {\n  tag: string;\n} & (FullscreenDialogData | AlertDialogData | SelectionDialogData);\n\nexport interface FullscreenDialogData {\n  type: 'fullscreen';\n  message: string;\n  progress?: number | 'indeterminate';\n  cancelable?: boolean;\n}\n\nexport interface AlertDialogData {\n  type: 'alert';\n  title: string;\n  message?: string;\n  collapsibleMessage?: {\n    label: string;\n    message: string;\n  };\n  buttons?: string[];\n  progress?: number;\n}\n\nexport interface SelectionDialogData {\n  type: 'selection';\n  title: string;\n  message?: string;\n  checkbox?: {\n    label: string;\n  };\n  options: string[];\n}\n\nexport interface DialogInteractionData {\n  selectedButton: string;\n  selectedOption?: string;\n  checkboxes?: {\n    [label: string]: boolean;\n  };\n}\n","import {\n  PlatformToRendererListener,\n  RendererDelegate,\n  RendererToPlatformListener,\n} from '@lyricistant/common/Delegates';\n\n/**\n * Represents some discrete \"grouping\" of logic related mostly to a single bit\n * of functionality that needs to be handled on the platform.\n *\n * Managers are the basic building block of all platform-related code. They\n * primarily handle communication between the platform and the renderer via\n * having a {@link RendererDelegate} injected via their constructors, and\n * registering for renderer events (or using\n * {@link RendererDelegate.addRendererListenerSetListener}) to respond to with data.\n *\n * Some general tips:\n *\n * 1. Managers should avoid talking directly to other managers. Instead, inject\n *    \"platform\" classes directly. Lyricistant doesn't currently hold this rule\n *    true, but it's still a good tip to abide by.\n * 2. Prefer sending data immediately to the renderer as soon as the renderer sets\n *    a listener for a channel, vs waiting for a specific event from the\n *    renderer asking for data.\n * 3. Keep managers focused on a single feature. What feature means is loosely\n *    defined but if you're listening to more than 4 renderer channels, your\n *    manager is likely doing too much work.\n */\nexport interface Manager {\n  register(): void;\n}\n\n/** Fetches the current editor text from the renderer. */\nexport const getEditorText = async (\n  rendererDelegate: RendererDelegate\n): Promise<string> =>\n  new Promise((resolve) => {\n    const onEditorText = (text: string) => {\n      rendererDelegate.removeListener('editor-text', onEditorText);\n      resolve(text);\n    };\n    rendererDelegate.on('editor-text', onEditorText);\n    rendererDelegate.send('request-editor-text');\n  });\n/**\n * Show a dialog on the renderer and wait for the dialog to be interacted with.\n *\n * If your dialog can't be interacted with (you don't supply any buttons to it),\n * then this will never resolve. You should instead just use\n * `rendererDelegate.send('show-dialog')` directly.\n */\nexport const showRendererDialog = async (\n  rendererDelegate: RendererDelegate,\n  ...args: Parameters<PlatformToRendererListener['show-dialog']>\n): Promise<Parameters<RendererToPlatformListener['dialog-interaction']>> =>\n  new Promise((resolve) => {\n    const onInteraction = (\n      ...clickArgs: Parameters<RendererToPlatformListener['dialog-interaction']>\n    ) => {\n      rendererDelegate.removeListener('dialog-interaction', onInteraction);\n      rendererDelegate.removeListener('dialog-closed', onClose);\n      resolve(clickArgs);\n    };\n\n    const onClose = () => {\n      rendererDelegate.removeListener('dialog-interaction', onInteraction);\n      rendererDelegate.removeListener('dialog-closed', onClose);\n    };\n\n    rendererDelegate.on('dialog-interaction', onInteraction);\n    rendererDelegate.on('dialog-closed', onClose);\n    rendererDelegate.send('show-dialog', ...args);\n  });\n","import { RendererDelegate } from '@lyricistant/common/Delegates';\nimport { YES_NO_BUTTONS } from '@lyricistant/common/dialogs/Dialog';\nimport { Logger } from '@lyricistant/common/Logger';\nimport { AppData } from '@lyricistant/common-platform/appdata/AppData';\nimport { FileManager } from '@lyricistant/common-platform/files/FileManager';\nimport { FileHistory } from '@lyricistant/common-platform/history/FileHistory';\nimport {\n  Manager,\n  showRendererDialog,\n} from '@lyricistant/common-platform/Manager';\nimport { Times } from '@lyricistant/common-platform/time/Times';\n\nexport class UnsavedDataManager implements Manager {\n  public static readonly UNSAVED_LYRICS_KEY = 'unsaved-lyrics-key';\n  public static readonly RECOVER_UNSAVED_LYRICS_TAG =\n    'unsaved-data-manager-recover-lyrics';\n  private static readonly MINIMUM_FILE_SAVE_ELAPSED_TIME_MS = 30_000;\n  private static readonly AUTOMATIC_FILE_SAVE_MS = 300_000;\n\n  private lastFileSaveMs: number = null;\n  private hasPromptedUnsavedDataRecovery = false;\n  public constructor(\n    private rendererDelegate: RendererDelegate,\n    private fileManager: FileManager,\n    private appData: AppData,\n    private fileHistory: FileHistory,\n    private times: Times,\n    private logger: Logger\n  ) {}\n\n  public register = (): void => {\n    this.fileManager.setInitialFileLoadedListener(this.checkForUnsavedData);\n    this.rendererDelegate.on('editor-idle', this.onEditorIdle);\n    this.fileManager.addOnFileChangedListener(() => {\n      if (this.hasPromptedUnsavedDataRecovery) {\n        this.appData.delete(UnsavedDataManager.UNSAVED_LYRICS_KEY);\n      }\n    });\n  };\n\n  private checkForUnsavedData = async () => {\n    this.logger.verbose('Checking for unsaved data...');\n    const hasTemporaryData = await this.appData.exists(\n      UnsavedDataManager.UNSAVED_LYRICS_KEY\n    );\n    const hasUnsavedData =\n      hasTemporaryData &&\n      (await this.fileHistory.isNonEmptyHistory(await this.getUnsavedData()));\n\n    if (hasUnsavedData) {\n      this.logger.verbose('Unsaved data found.');\n      const [dialogTag, interactionData] = await showRendererDialog(\n        this.rendererDelegate,\n        {\n          type: 'alert',\n          tag: UnsavedDataManager.RECOVER_UNSAVED_LYRICS_TAG,\n          title: 'Recover unsaved lyrics',\n          message: 'Unsaved lyrics found. Would you like to recover them?',\n          buttons: YES_NO_BUTTONS,\n        }\n      );\n      await this.onDialogClicked(dialogTag, interactionData.selectedButton);\n    } else {\n      this.hasPromptedUnsavedDataRecovery = true;\n      this.startAutomaticFileSaver();\n    }\n  };\n\n  private onDialogClicked = async (tag: string, buttonLabel: string) => {\n    if (tag === UnsavedDataManager.RECOVER_UNSAVED_LYRICS_TAG) {\n      if (buttonLabel === 'Yes') {\n        await this.fileHistory.deserialize(await this.getUnsavedData());\n        this.rendererDelegate.send(\n          'file-opened',\n          undefined,\n          this.fileHistory.getParsedHistory(),\n          false\n        );\n      }\n      this.hasPromptedUnsavedDataRecovery = true;\n      this.startAutomaticFileSaver();\n    }\n  };\n\n  private onEditorIdle = async (text: string) => {\n    if (this.canPerformFileSave()) {\n      this.logger.verbose('Editor is idle; saving unsaved data');\n      await this.performFileSave(text);\n    } else {\n      this.logger.verbose(\n        'Editor is idle but unsaved data save was too recent. Skipping.'\n      );\n    }\n  };\n\n  private startAutomaticFileSaver = () => {\n    setTimeout(\n      this.onAutomaticFileSaveTriggered,\n      UnsavedDataManager.AUTOMATIC_FILE_SAVE_MS\n    );\n  };\n\n  private onAutomaticFileSaveTriggered = () => {\n    const onEditorText = async (text: string) => {\n      this.rendererDelegate.removeListener('editor-text', onEditorText);\n      await this.performFileSave(text);\n\n      setTimeout(\n        this.onAutomaticFileSaveTriggered,\n        UnsavedDataManager.AUTOMATIC_FILE_SAVE_MS\n      );\n    };\n\n    this.rendererDelegate.on('editor-text', onEditorText);\n    this.rendererDelegate.send('request-editor-text');\n  };\n\n  private performFileSave = async (text: string) => {\n    this.fileHistory.add(text);\n    await this.appData.set(\n      UnsavedDataManager.UNSAVED_LYRICS_KEY,\n      await this.fileHistory.serialize()\n    );\n    this.lastFileSaveMs = this.times.elapsed();\n  };\n\n  private canPerformFileSave = () =>\n    this.hasPromptedUnsavedDataRecovery ||\n    this.lastFileSaveMs == null ||\n    this.times.elapsed() - this.lastFileSaveMs >=\n      UnsavedDataManager.MINIMUM_FILE_SAVE_ELAPSED_TIME_MS;\n\n  private getUnsavedData = (): Promise<any> =>\n    this.appData.get(UnsavedDataManager.UNSAVED_LYRICS_KEY);\n}\n","import { AppData } from '@lyricistant/common-platform/appdata/AppData';\nimport { UnsavedDataManager } from '@lyricistant/common-platform/files/UnsavedDataManager';\nimport { PlatformLogger } from '@lyricistant/common-platform/logging/PlatformLogger';\nimport { Manager } from '@lyricistant/common-platform/Manager';\n\nexport class UnloadManager implements Manager {\n  public constructor(\n    private appData: AppData,\n    private logger: PlatformLogger\n  ) {}\n\n  public register = () => {\n    addEventListener('unload', () => {\n      this.logger.info('User is leaving page. Deleting unsaved lyrics.');\n      this.logger.flush?.();\n\n      // TODO Managers shouldn't creep into each other implementations like this.\n      this.appData.delete(UnsavedDataManager.UNSAVED_LYRICS_KEY);\n    });\n  };\n}\n","/**\n * Represents an object that can be used to determine whether an action has been\n * cancelled.\n *\n * Actions can be cancelled via an instance of {@link Cancellable}.\n */\nexport interface CancelSignal {\n  isCancelled: boolean;\n  addOnCancelListener: (onCancel: () => void) => void;\n}\n\nexport class CancelError extends Error {\n  public constructor(message: string) {\n    super(message);\n    this.name = 'CancelError';\n  }\n}\n\n/**\n * An implementation of a cancel signal.\n *\n * {@link CancelSignalImpl.cancel} is only made public to be used by\n * {@link Cancellable}; we don't want things using a {@link CancelSignal} to\n * cancel themselves like this.\n */\nclass CancelSignalImpl implements CancelSignal {\n  public isCancelled = false;\n  private listeners: Array<() => void> = [];\n\n  public addOnCancelListener = (onCancel: () => void) => {\n    if (this.isCancelled) {\n      onCancel();\n      return;\n    }\n    this.listeners.push(onCancel);\n  };\n  public cancel = () => {\n    this.isCancelled = true;\n    this.listeners.forEach((listener) => listener());\n    this.listeners = [];\n  };\n}\n\n/**\n * Cancellable represents a controller object that allows you to abort one or\n * more requests as desired, so long as all the requests use the same\n * {@link Cancellable.signal}.\n */\nexport class Cancellable {\n  public readonly signal: CancelSignal = new CancelSignalImpl();\n\n  public cancel = () => (this.signal as CancelSignalImpl).cancel();\n}\n\n/**\n * Takes a promise and makes it cancellable by way of a {@link CancelSignal}\n *\n * If the signal prompts a cancellation, the promise will be rejected.\n * Otherwise, it will resolve or reject normally.\n *\n * @param promise The promise to make cancellable.\n * @param signal The CancelSignal to invoke cancellation.\n */\nexport const makeCancellable = <T>(\n  promise: Promise<T>,\n  signal: CancelSignal\n) => {\n  if (!promise || !(promise instanceof Promise)) {\n    throw new Error('Invalid promise');\n  }\n  return new Promise<T>(async (resolve, reject) => {\n    signal.addOnCancelListener(() =>\n      reject(new CancelError('Promise cancelled'))\n    );\n\n    promise.then(resolve, reject).catch(reject);\n  });\n};\n","import { SystemPalette } from '@lyricistant/common/theme/SystemTheme';\n\nexport enum ColorScheme {\n  Light,\n  Dark,\n  System,\n}\nexport enum Font {\n  Roboto_Mono,\n  Roboto,\n}\nexport enum RhymeSource {\n  Offline,\n  Datamuse,\n}\nexport enum DefaultFileType {\n  Always_Ask,\n  Lyricistant_Lyrics,\n  Plain_Text,\n}\nexport enum DetailPaneVisibility {\n  Toggleable,\n  Always_Show,\n}\nexport type DisplayableColorScheme = ColorScheme.Light | ColorScheme.Dark;\n\nexport interface ThemeData {\n  colorScheme: DisplayableColorScheme;\n  textSize: number;\n  font: Font;\n  systemPalette?: SystemPalette;\n}\nexport interface PreferencesData {\n  colorScheme: ColorScheme;\n  textSize: number;\n  font: Font;\n  rhymeSource: RhymeSource;\n  defaultFileType: DefaultFileType;\n  detailPaneVisibility: DetailPaneVisibility;\n}\n","import {\n  ColorScheme,\n  DefaultFileType,\n  DetailPaneVisibility,\n  Font,\n  PreferencesData,\n  RhymeSource,\n} from '@lyricistant/common/preferences/PreferencesData';\n\nexport interface Preferences {\n  getPreferences: () => Promise<Partial<PreferencesData> | void>;\n  setPreferences: (data: PreferencesData) => Promise<void>;\n  getDefaultPreferences?: () => Promise<Partial<PreferencesData>>;\n}\n\nexport const getPreferencesDataOrDefault = async (\n  preferences: Preferences\n): Promise<PreferencesData> => {\n  const savedPreferencesData =\n    (await preferences.getPreferences()) as Partial<PreferencesData>;\n  return {\n    textSize: 16,\n    colorScheme: ColorScheme.System,\n    rhymeSource: RhymeSource.Datamuse,\n    font: Font.Roboto,\n    defaultFileType: DefaultFileType.Always_Ask,\n    detailPaneVisibility: DetailPaneVisibility.Always_Show,\n    ...(await preferences.getDefaultPreferences?.()),\n    ...savedPreferencesData,\n  };\n};\n","import {\n  CancelError,\n  Cancellable,\n  CancelSignal,\n  makeCancellable,\n} from '@lyricistant/common/Cancellable';\nimport { RendererDelegate } from '@lyricistant/common/Delegates';\nimport { PlatformFile } from '@lyricistant/common/files/PlatformFile';\nimport { Logger } from '@lyricistant/common/Logger';\nimport { DefaultFileType } from '@lyricistant/common/preferences/PreferencesData';\nimport { Buffers } from '@lyricistant/common-platform/files/Buffers';\nimport { FileDataExtensions } from '@lyricistant/common-platform/files/extensions/FileDataExtension';\nimport {\n  Files,\n  SerializedExtensions,\n} from '@lyricistant/common-platform/files/Files';\nimport {\n  FileHandler,\n  FileHandlers,\n} from '@lyricistant/common-platform/files/handlers/FileHandler';\nimport { RecentFiles } from '@lyricistant/common-platform/files/RecentFiles';\nimport {\n  Manager,\n  showRendererDialog,\n} from '@lyricistant/common-platform/Manager';\nimport {\n  getPreferencesDataOrDefault,\n  Preferences,\n} from '@lyricistant/common-platform/preferences/Preferences';\n\n/** Represents all the data that {@link FileManager} needs to store for the current file. */\ninterface CurrentFile {\n  path: string;\n  handler: FileHandler;\n}\n\nexport class FileManager implements Manager {\n  public static SAVE_FILE_DIALOG_TAG = 'save-file';\n  public static OPEN_FILE_DIALOG_TAG = 'open-file';\n  public static CONFIRM_NEW_FILE_TAG = 'confirm-new-file';\n  public static CONFIRM_OPEN_FILE_TAG = 'confirm-open-file';\n  public static CHOOSE_FILE_HANDLER_TAG = 'choose-file-handler';\n\n  public initialFile: PlatformFile | null = null;\n\n  private currentFile: CurrentFile | null = null;\n  private fileChangedListeners: Array<\n    (currentFilename: string | null, recentFiles: string[]) => void\n  > = [];\n  private initialFileLoadedListener: () => void = undefined;\n  private isRendererReady = false;\n\n  public constructor(\n    private rendererDelegate: RendererDelegate,\n    private files: Files,\n    private buffers: Buffers,\n    private recentFiles: RecentFiles,\n    private fileHandlers: FileHandlers,\n    private fileDataExtensions: FileDataExtensions,\n    private preferences: Preferences,\n    private logger: Logger\n  ) {}\n\n  public register(): void {\n    this.rendererDelegate.on('ready-for-events', this.onRendererReady);\n    this.rendererDelegate.on('new-file-attempt', this.onNewFile);\n    this.rendererDelegate.on('open-file-attempt', this.onOpenFile);\n    this.rendererDelegate.on('save-file-attempt', this.onRendererSaveFile);\n  }\n\n  public addOnFileChangedListener = (\n    listener: (currentFilename: string | null, recentFiles: string[]) => void\n  ) => {\n    this.fileChangedListeners.push(listener);\n  };\n\n  public setInitialFileLoadedListener = (listener: () => void) => {\n    this.initialFileLoadedListener = listener;\n  };\n\n  public onNewFile = () => {\n    const isFileModified = async (modified: boolean) => {\n      this.rendererDelegate.removeListener('is-file-modified', isFileModified);\n      if (modified) {\n        await this.onPromptSaveFileForNew();\n      } else {\n        this.createNewFile();\n      }\n    };\n\n    this.rendererDelegate.on('is-file-modified', isFileModified);\n    this.rendererDelegate.send('check-file-modified');\n  };\n\n  public onOpenFile = async (file?: PlatformFile) => {\n    if (!this.isRendererReady && file) {\n      this.logger.verbose(\n        'Received a file before renderer ready; delaying open',\n        file.metadata\n      );\n      this.initialFile = file;\n      return;\n    }\n\n    const isFileModified = async (modified: boolean) => {\n      this.rendererDelegate.removeListener('is-file-modified', isFileModified);\n      if (modified) {\n        await this.onPromptSaveFileForOpen(file);\n      } else {\n        await this.openFile(file);\n      }\n    };\n\n    this.rendererDelegate.on('is-file-modified', isFileModified);\n    this.rendererDelegate.send('check-file-modified');\n  };\n\n  public onSaveFile = (forceSaveAs: boolean) => {\n    this.showLoadingDialog('save');\n    const onEditorText = async (text: string) => {\n      this.rendererDelegate.removeListener('editor-text', onEditorText);\n\n      let filePath = this.currentFile?.path;\n      if (forceSaveAs) {\n        filePath = null;\n      }\n\n      await this.saveFileActual(text, filePath);\n    };\n\n    this.rendererDelegate.on('editor-text', onEditorText);\n    this.rendererDelegate.send('request-editor-text');\n  };\n\n  private openFile = async (file?: PlatformFile) => {\n    const cancelSignal = this.showLoadingDialog('open', true);\n\n    try {\n      // We still pass this to the Files in-case they have state they want to set based on the PlatformFile, or if they\n      // need to make any platform-specific changes before we open it.\n      const platformFile = await makeCancellable(\n        this.files.openFile(file),\n        cancelSignal\n      );\n      if (platformFile) {\n        await this.openFileActual(platformFile);\n      }\n    } catch (e) {\n      if (!(e instanceof CancelError)) {\n        this.logger.error('Error opening file.', e);\n      }\n      this.rendererDelegate.send('file-opened', e, undefined, true);\n    } finally {\n      this.rendererDelegate.send(\n        'close-dialog',\n        FileManager.OPEN_FILE_DIALOG_TAG\n      );\n    }\n  };\n\n  private onRendererReady = async () => {\n    this.isRendererReady = true;\n    this.createNewFile();\n\n    if (this.initialFile) {\n      this.logger.verbose(\n        'Renderer ready; opening delayed file',\n        this.initialFile.metadata\n      );\n      await this.onOpenFile(this.initialFile);\n      this.initialFile = null;\n    }\n\n    this.initialFileLoadedListener?.();\n  };\n\n  private onRendererSaveFile = async (text: string) => {\n    this.showLoadingDialog('save');\n    await this.saveFileActual(text, this.currentFile?.path);\n  };\n\n  private saveFileActual = async (lyrics: string, path: string) => {\n    try {\n      this.logger.debug('Saving file with lyrics', { path, lyrics });\n\n      this.fileDataExtensions.forEach((extension) =>\n        extension.onBeforeSerialization?.(lyrics)\n      );\n      const extensions: SerializedExtensions = {};\n      for (const extension of this.fileDataExtensions) {\n        extensions[extension.key] = this.buffers.stringToBuffer(\n          JSON.stringify(await extension.serialize())\n        );\n      }\n\n      // We check based off the path instead of the current file handler being null\n      // for the case where we're doing a \"Save As\", so the current file handler is\n      // set but the user still wants to save a new file.\n      // If there's a path, then a file should be opened so there should be a\n      // current file handler.\n      const fileHandler = !path\n        ? await this.getDefaultFileHandler()\n        : this.currentFile?.handler;\n\n      const serializedFileData = await fileHandler.create({\n        extensions,\n        lyrics,\n      });\n\n      const cancelSignal = this.showLoadingDialog('save', true);\n      const newFileMetadata = await makeCancellable(\n        this.files.saveFile(\n          serializedFileData,\n          `Lyrics.${fileHandler.extension}`,\n          path\n        ),\n        cancelSignal\n      );\n      if (newFileMetadata) {\n        this.showLoadingDialog('save');\n        const fileTitle = newFileMetadata.name ?? newFileMetadata.path;\n        this.currentFile = {\n          path: newFileMetadata.path,\n          handler: fileHandler,\n        };\n        this.rendererDelegate.send('file-opened', undefined, lyrics, true);\n        this.addRecentFile(newFileMetadata.path);\n        this.fileChangedListeners.forEach((listener) =>\n          listener(fileTitle, this.recentFiles.getRecentFiles())\n        );\n        this.rendererDelegate.send('file-save-ended', null, fileTitle);\n      } else {\n        this.rendererDelegate.send('file-save-ended', null, null);\n      }\n    } catch (e) {\n      this.logger.error('Error saving file', e);\n    } finally {\n      this.rendererDelegate.send(\n        'close-dialog',\n        FileManager.SAVE_FILE_DIALOG_TAG\n      );\n    }\n  };\n\n  private openFileActual = async (platformFile: PlatformFile) => {\n    this.showLoadingDialog('open');\n    const { handler, fileData } = await this.createFileData(platformFile);\n\n    this.currentFile = {\n      path: platformFile.metadata.path,\n      handler,\n    };\n\n    for (const extension of this.fileDataExtensions) {\n      const data = this.buffers.bufferToString(\n        fileData.extensions?.[extension.key]\n      );\n      if (data?.length > 0) {\n        await extension.deserialize(JSON.parse(data));\n      } else {\n        extension.reset();\n      }\n    }\n    this.rendererDelegate.send(\n      'file-opened',\n      undefined,\n      fileData?.lyrics ?? '',\n      true\n    );\n    this.addRecentFile(this.currentFile.path);\n    const updatedRecentFiles = this.recentFiles.getRecentFiles();\n    this.fileChangedListeners.forEach((listener) =>\n      listener(\n        platformFile.metadata.name ?? platformFile.metadata.path,\n        updatedRecentFiles\n      )\n    );\n  };\n\n  private createNewFile = () => {\n    this.currentFile = null;\n    this.rendererDelegate.send('new-file-created');\n    this.fileDataExtensions.forEach((extension) => extension.reset());\n    this.fileChangedListeners.forEach((listener) =>\n      listener(null, this.recentFiles.getRecentFiles())\n    );\n  };\n\n  private onPromptSaveFileForNew = async () => {\n    const [tag, { selectedButton }] = await showRendererDialog(\n      this.rendererDelegate,\n      {\n        tag: FileManager.CONFIRM_NEW_FILE_TAG,\n        type: 'alert',\n        title: 'Discard unsaved changes?',\n        message:\n          \"Your changes haven't been saved. Are you sure you want to create a new file?\",\n        buttons: ['Cancel', 'Create new file'],\n      }\n    );\n\n    if (tag === FileManager.CONFIRM_NEW_FILE_TAG) {\n      if (selectedButton === 'Create new file') {\n        this.createNewFile();\n      } else {\n        this.logger.debug('User selected to not create a new file.');\n      }\n    }\n  };\n\n  private onPromptSaveFileForOpen = async (file?: PlatformFile) => {\n    const [tag, { selectedButton }] = await showRendererDialog(\n      this.rendererDelegate,\n      {\n        tag: FileManager.CONFIRM_OPEN_FILE_TAG,\n        type: 'alert',\n        title: 'Discard unsaved changes?',\n        message:\n          \"Your changes haven't been saved. Are you sure you want to open a different file?\",\n        buttons: ['Cancel', 'Open file'],\n      }\n    );\n\n    if (tag === FileManager.CONFIRM_OPEN_FILE_TAG) {\n      if (selectedButton === 'Open file') {\n        await this.openFile(file);\n      } else {\n        this.logger.debug('User selected to not open file', file?.metadata);\n      }\n    }\n  };\n\n  private addRecentFile = (filePath: string) => {\n    this.logger.debug('Attempting to add recent file', filePath);\n    let recentlyOpenedFiles = this.recentFiles.getRecentFiles();\n    recentlyOpenedFiles.unshift(filePath);\n    recentlyOpenedFiles = Array.from(new Set(recentlyOpenedFiles));\n    if (recentlyOpenedFiles.length > 10) {\n      recentlyOpenedFiles.pop();\n    }\n    this.recentFiles.setRecentFiles(recentlyOpenedFiles);\n  };\n\n  private createFileData = async (file: PlatformFile) => {\n    const handler = this.fileHandlers.find((it) => it.canHandle(file));\n    return {\n      handler,\n      fileData: await handler?.load(file),\n    };\n  };\n\n  /**\n   * Shows a full screen dialog over the renderer to denote that the FileManager\n   * is doing potentially long running work.\n   *\n   * @param type Whether the long running work is for opening or saving files.\n   * @param cancelable Whether the dialog can be cancelled by the user.\n   */\n  private showLoadingDialog = (\n    type: 'open' | 'save',\n    cancelable = false\n  ): CancelSignal | null => {\n    const tag =\n      type === 'open'\n        ? FileManager.OPEN_FILE_DIALOG_TAG\n        : FileManager.SAVE_FILE_DIALOG_TAG;\n    this.rendererDelegate.send('show-dialog', {\n      tag,\n      type: 'fullscreen',\n      message: `${type === 'open' ? 'Opening' : 'Saving'} file`,\n      progress: 'indeterminate',\n      cancelable,\n    });\n    if (cancelable === true) {\n      const cancellable = new Cancellable();\n      const onDialogClosed = (closedTag: string) => {\n        if (closedTag === tag) {\n          this.rendererDelegate.removeListener('dialog-closed', onDialogClosed);\n          cancellable.cancel();\n        }\n      };\n      this.rendererDelegate.on('dialog-closed', onDialogClosed);\n      return cancellable.signal;\n    }\n  };\n\n  private promptFileHandlerSelection = async (): Promise<FileHandler> => {\n    const lyricsHandler = this.fileHandlers.find(\n      (handler) => handler.extension === 'lyrics'\n    );\n    const textHandler = this.fileHandlers.find(\n      (handler) => handler.extension === 'txt'\n    );\n\n    const lyricsOption = 'Lyricistant file (.lyrics)';\n    const textOption = 'Plain text (.txt)';\n    const neverAskAgainLabel = 'Never ask again';\n\n    const [tag, interactionData] = await showRendererDialog(\n      this.rendererDelegate,\n      {\n        tag: FileManager.CHOOSE_FILE_HANDLER_TAG,\n        type: 'selection',\n        title: 'Select file type',\n        checkbox: {\n          label: neverAskAgainLabel,\n        },\n        message:\n          'What file type to save as? Text files have wide compatibility, but Lyrics files support all Lyricistant features.',\n        options: [lyricsOption, textOption],\n      }\n    );\n\n    if (tag !== FileManager.CHOOSE_FILE_HANDLER_TAG) {\n      return;\n    }\n\n    if (interactionData.checkboxes?.[neverAskAgainLabel]) {\n      const preferencesData = await getPreferencesDataOrDefault(\n        this.preferences\n      );\n      await this.preferences.setPreferences({\n        ...preferencesData,\n        defaultFileType:\n          interactionData.selectedOption === textOption\n            ? DefaultFileType.Plain_Text\n            : DefaultFileType.Lyricistant_Lyrics,\n      });\n    }\n    if (interactionData.selectedOption === textOption) {\n      return textHandler;\n    }\n    return lyricsHandler;\n  };\n\n  private getDefaultFileHandler = async (): Promise<FileHandler> => {\n    const preferencesData = await getPreferencesDataOrDefault(this.preferences);\n    const textFileHandler = this.fileHandlers.find(\n      (handler) => handler.extension === 'txt'\n    );\n    const lyricsFileHandler = this.fileHandlers.find(\n      (handler) => handler.extension === 'lyrics'\n    );\n\n    switch (preferencesData.defaultFileType) {\n      case DefaultFileType.Always_Ask:\n        return await this.promptFileHandlerSelection();\n      case DefaultFileType.Plain_Text:\n        return textFileHandler;\n      default:\n        return lyricsFileHandler;\n    }\n  };\n}\n","import { RendererDelegate } from '@lyricistant/common/Delegates';\nimport {\n  ColorScheme,\n  DisplayableColorScheme,\n  PreferencesData,\n} from '@lyricistant/common/preferences/PreferencesData';\nimport {\n  SystemPalette,\n  SystemTheme,\n} from '@lyricistant/common/theme/SystemTheme';\nimport { Manager } from '@lyricistant/common-platform/Manager';\nimport {\n  getPreferencesDataOrDefault,\n  Preferences,\n} from '@lyricistant/common-platform/preferences/Preferences';\nimport { SystemThemeProvider } from '@lyricistant/common-platform/theme/SystemThemeProvider';\n\n// TODO Make this manage the renderer palette as well & update StatusBarManager to take advantage.\nexport class PreferenceManager implements Manager {\n  private onThemeChangedListeners: Array<\n    (theme: ColorScheme, systemPalette: SystemPalette) => void\n  > = [];\n  private systemTheme: SystemTheme;\n  private systemPalette: SystemPalette;\n\n  public constructor(\n    private rendererDelegate: RendererDelegate,\n    private systemThemeProvider: SystemThemeProvider,\n    private preferences: Preferences\n  ) {}\n\n  public register(): void {\n    this.rendererDelegate.on('save-prefs', this.onSavePrefs);\n    this.systemThemeProvider.onChange(\n      async (systemTheme: SystemTheme, palette) => {\n        this.systemTheme = systemTheme;\n        this.systemPalette = palette;\n\n        this.sendThemeUpdate(\n          await getPreferencesDataOrDefault(this.preferences)\n        );\n      }\n    );\n    this.rendererDelegate.addRendererListenerSetListener(\n      'prefs-updated',\n      async () => {\n        this.rendererDelegate.send(\n          'prefs-updated',\n          await getPreferencesDataOrDefault(this.preferences)\n        );\n      }\n    );\n    this.rendererDelegate.addRendererListenerSetListener(\n      'theme-updated',\n      async () => {\n        this.sendThemeUpdate(\n          await getPreferencesDataOrDefault(this.preferences)\n        );\n      }\n    );\n  }\n\n  public addThemeChangedListener = (\n    listener: (theme: ColorScheme, systemPalette: SystemPalette) => void\n  ) => {\n    this.onThemeChangedListeners.push(listener);\n  };\n\n  private onSavePrefs = async (data: PreferencesData) => {\n    if (!data) {\n      return;\n    }\n\n    await this.preferences.setPreferences(data);\n    this.rendererDelegate.send('prefs-updated', data);\n    this.sendThemeUpdate(data);\n  };\n\n  private sendThemeUpdate = (data: PreferencesData): void => {\n    const colorScheme = this.normalizeColorScheme(data.colorScheme);\n    const systemPalette =\n      data.colorScheme === ColorScheme.System ? this.systemPalette : undefined;\n    this.rendererDelegate.send('theme-updated', {\n      ...data,\n      colorScheme,\n      systemPalette,\n    });\n\n    this.onThemeChangedListeners.forEach((listener) =>\n      listener(colorScheme, systemPalette)\n    );\n  };\n\n  private normalizeColorScheme(theme: ColorScheme): DisplayableColorScheme {\n    return theme === ColorScheme.System\n      ? this.systemThemeToTheme(this.systemTheme)\n      : theme;\n  }\n\n  private systemThemeToTheme = (\n    systemTheme: SystemTheme\n  ): DisplayableColorScheme =>\n    systemTheme === SystemTheme.Dark ? ColorScheme.Dark : ColorScheme.Light;\n}\n","import { RendererDelegate } from '@lyricistant/common/Delegates';\nimport { FileManager } from '@lyricistant/common-platform/files/FileManager';\nimport { Manager } from '@lyricistant/common-platform/Manager';\nimport {\n  TitleFormatter,\n  UiConfigProvider,\n} from '@lyricistant/common-platform/ui/UiConfigProviders';\n\nexport class UiConfigManager implements Manager {\n  public constructor(\n    private rendererDelegate: RendererDelegate,\n    private provideUiConfig: UiConfigProvider,\n    private formatTitle: TitleFormatter,\n    private fileManager: FileManager\n  ) {}\n\n  public register(): void {\n    this.rendererDelegate.addRendererListenerSetListener('ui-config', () => {\n      this.rendererDelegate.send('ui-config', this.provideUiConfig());\n    });\n\n    this.fileManager.addOnFileChangedListener((filename) => {\n      this.rendererDelegate.send(\n        'app-title-changed',\n        this.formatTitle(filename)\n      );\n    });\n  }\n}\n","import { RendererDelegate } from '@lyricistant/common/Delegates';\nimport { Buffers } from '@lyricistant/common-platform/files/Buffers';\nimport { Files } from '@lyricistant/common-platform/files/Files';\nimport { PlatformLogger } from '@lyricistant/common-platform/logging/PlatformLogger';\nimport { Manager } from '@lyricistant/common-platform/Manager';\n\nexport class LogManager implements Manager {\n  public constructor(\n    private rendererDelegate: RendererDelegate,\n    private files: Files,\n    private buffers: Buffers,\n    private logger: PlatformLogger\n  ) {}\n\n  public register() {\n    this.rendererDelegate.on('save-logs', async () => {\n      const logs = await this.logger.getPrintedLogs();\n\n      await this.files.saveFile(\n        this.buffers.stringToBuffer(logs.join('\\n')),\n        'logs.txt'\n      );\n    });\n  }\n}\n","import { RendererDelegate } from '@lyricistant/common/Delegates';\nimport { FileHistory } from '@lyricistant/common-platform/history/FileHistory';\nimport { getEditorText, Manager } from '@lyricistant/common-platform/Manager';\n\nexport class FileHistoryManager implements Manager {\n  public constructor(\n    private rendererDelegate: RendererDelegate,\n    private fileHistory: FileHistory\n  ) {}\n  public register() {\n    this.rendererDelegate.on('apply-file-history', (history) => {\n      this.fileHistory.add(history.text);\n      this.rendererDelegate.send('file-opened', undefined, history.text, false);\n    });\n    this.rendererDelegate.addRendererListenerSetListener(\n      'file-history',\n      async () => {\n        this.rendererDelegate.send(\n          'file-history',\n          await this.getIncrementalHistory()\n        );\n      }\n    );\n  }\n\n  private getIncrementalHistory = async () =>\n    this.fileHistory.getIncrementalParsedHistory({\n      includeChunks: { base: await getEditorText(this.rendererDelegate) },\n    }) ?? [];\n}\n","import { isUnderTest } from '@lyricistant/common/BuildModes';\nimport { RendererDelegate, RendererInfo } from '@lyricistant/common/Delegates';\nimport { AppData } from '@lyricistant/common-platform/appdata/AppData';\nimport { Manager } from '@lyricistant/common-platform/Manager';\n\nexport class FirstLaunchManager implements Manager {\n  private static readonly IS_FIRST_LAUNCH_KEY = 'is-first-launch';\n  public constructor(\n    private rendererDelegate: RendererDelegate,\n    private appData: AppData\n  ) {}\n\n  public register = () => {\n    this.rendererDelegate.on('ready-for-events', this.onReadyForEvents);\n  };\n\n  private onReadyForEvents = async (info: RendererInfo) => {\n    if (info.isDeepLink) {\n      return;\n    }\n\n    const isFirstLaunch = !(await this.appData.exists(\n      FirstLaunchManager.IS_FIRST_LAUNCH_KEY\n    ));\n    if (isFirstLaunch && !isUnderTest) {\n      this.rendererDelegate.send('open-about');\n    }\n\n    this.appData.set(FirstLaunchManager.IS_FIRST_LAUNCH_KEY, false);\n  };\n}\n","import { DateTime, LocaleOptions } from 'luxon';\n\nexport interface Clock {\n  now: () => Instant;\n  fromIso: (isoString: string) => Instant;\n}\n\nexport interface Instant {\n  formatLocal: (options: Intl.DateTimeFormatOptions) => string;\n  formatIso: () => string;\n}\n\nconst createInstant = (\n  dateTime: DateTime,\n  locale?: LocaleOptions,\n  zone?: string\n): Instant => ({\n  formatLocal: (option) =>\n    dateTime.toLocaleString(\n      { ...option, timeZone: zone ?? option.timeZone },\n      locale\n    ),\n  formatIso: () => dateTime.toISO(),\n});\n\nexport class RealClock implements Clock {\n  public now = (): Instant => createInstant(DateTime.local());\n  public fromIso = (isoString: string) =>\n    createInstant(DateTime.fromISO(isoString));\n}\n\nexport class FakeClock implements Clock {\n  public now = (): Instant =>\n    createInstant(\n      DateTime.fromObject(\n        {\n          month: 7,\n          day: 22,\n          year: 2029,\n          hour: 8,\n          minute: 0,\n          second: 0,\n          millisecond: 0,\n        },\n        { zone: 'America/Los_Angeles' }\n      ),\n      {\n        locale: 'en-US',\n      },\n      'America/Los_Angeles'\n    );\n  public fromIso = (isoString: string) =>\n    createInstant(\n      DateTime.fromISO(isoString),\n      {\n        locale: 'en-US',\n      },\n      'America/Los_Angeles'\n    );\n}\n","import {\n  FileMetadata,\n  PlatformFile,\n} from '@lyricistant/common/files/PlatformFile';\nimport { ExtensionData } from '@lyricistant/common-platform/files/extensions/FileDataExtension';\n\nexport type SerializedExtensions = {\n  [extensionKey in keyof ExtensionData]?: ArrayBuffer;\n};\nexport interface FileData {\n  /** The data contained with this file. * */\n  lyrics: string;\n  /** Potential extensions that exist on this file data. */\n  extensions?: SerializedExtensions;\n}\n\n/** The mime type for the Lyrics file format. */\nexport const LYRICS_MIME_TYPE = 'application/zip';\n/** The file extension for the Lyrics file format. */\nexport const LYRICS_EXTENSION = '.lyrics';\n/** Mime types that Lyricistant supports opening. */\nexport const SUPPORTED_MIME_TYPES = ['text/plain', LYRICS_MIME_TYPE];\n/** File extensions that Lyricistant supports opening. */\nexport const SUPPORTED_EXTENSIONS = ['.txt', LYRICS_EXTENSION];\n\n/**\n * An interface that represents the minimum functionality that a platform must\n * implement in order for Lyricistant to open and save files.\n *\n * What opening and saving files mean exactly can be decided by the platform\n * itself, but generally it is expected that users will be able to save a file\n * to a location on their device, then later re-open that file and see the exact\n * file that they had previously saved.\n */\nexport interface Files {\n  /**\n   * Open a file from the platform. If file is provided, it is a file that the\n   * user had dragged-and-dropped onto Lyricistant. If file is not provided,\n   * this should open a file picker.\n   *\n   * @param file Optionally a file that was dragged and dropped.\n   */\n  openFile: (file?: PlatformFile) => Promise<PlatformFile>;\n  /**\n   * Save the given data to a file. If this attempt to save the file was\n   * cancelled by the user, this method should return null. If it failed due to\n   * an unexpected error, it should reject.\n   *\n   * @param data The data to write directly to a file.\n   * @param defaultFileName The default file name, with extension, to use.\n   * @param path Optionally, the path that is associated with this file. A path\n   *   will be associated with this file if the user explicitly opened a file\n   *   using {@link openFile}, and the path provided here will be the same\n   *   returned by {@link openFile}. Otherwise, this will be null.\n   */\n  saveFile: (\n    data: ArrayBuffer,\n    defaultFileName: string,\n    path?: string\n  ) => Promise<FileMetadata>;\n  /**\n   * Optional functionality that platforms are not required to implement that\n   * allows reading a file directly without opening a file picker based on a\n   * path. The path given here will always be a path that was previously\n   * returned by {@link openFile}.\n   *\n   * @param path The path to open.\n   */\n  readFile?: (path: string) => Promise<PlatformFile>;\n}\n","import { PlatformFile } from '@lyricistant/common/files/PlatformFile';\nimport { ExtensionData } from '@lyricistant/common-platform/files/extensions/FileDataExtension';\nimport {\n  FileData,\n  LYRICS_EXTENSION,\n  SerializedExtensions,\n} from '@lyricistant/common-platform/files/Files';\nimport { FileHandler } from '@lyricistant/common-platform/files/handlers/FileHandler';\nimport JSZip from 'jszip';\nimport { isEqual } from 'lodash-es';\n\ntype LyricsArchive = typeof JSZip;\n/**\n * The version number of .lyrics files. Increment on incompatible changes to the\n * file schema.\n */\n\nconst LYRICISTANT_FILE_VERSION = 1;\nconst LYRICS_V1_FILE = 'lyrics.txt';\nconst EXTENSIONS_FOLDER = 'extensions';\nconst VERSION_FILE = 'version.json';\n\ninterface VersioningData {\n  version: number;\n  createdWith: string;\n}\n\nexport class LyricistantFileHandler implements FileHandler {\n  public extension = 'lyrics';\n\n  public canHandle = (file: PlatformFile) =>\n    file.type === 'application/zip' ||\n    // ZIP file magic number header.\n    isEqual(\n      new Uint8Array(file.data).subarray(0, 4),\n      Uint8Array.from([80, 75, 3, 4])\n    ) ||\n    file.metadata.path.endsWith(LYRICS_EXTENSION) ||\n    file.metadata?.name?.endsWith(LYRICS_EXTENSION);\n\n  public load = async (file: PlatformFile): Promise<FileData> => {\n    const archive: LyricsArchive = new JSZip();\n    await archive.loadAsync(file.data);\n\n    const { version, createdWith } = await this.readVersion(archive);\n\n    if (!version || version <= 0) {\n      throw new Error('This file is incompatible with Lyricistant.');\n    }\n\n    if (version === 1) {\n      return loadV1(archive);\n    }\n\n    throw new Error(\n      `This file is not compatible with this version of Lyricistant. Try using version ${createdWith}`\n    );\n  };\n\n  public create = async (file: FileData): Promise<ArrayBuffer> => {\n    const archive: LyricsArchive = new JSZip();\n\n    archive\n      .file(LYRICS_V1_FILE, file.lyrics)\n      .file('version.json', JSON.stringify(this.createVersion()));\n\n    const extensions = archive.folder('extensions');\n    Object.keys(file.extensions)\n      .filter((value) => value !== 'lyrics')\n      .forEach((key: keyof ExtensionData) => {\n        extensions.file(`${key}.dat`, file.extensions?.[key]);\n      });\n\n    return archive.generateAsync({\n      type: 'arraybuffer',\n    });\n  };\n\n  private readVersion = async (\n    archive: LyricsArchive\n  ): Promise<VersioningData> =>\n    JSON.parse(await archive.file(VERSION_FILE).async('string'));\n\n  private createVersion = (): VersioningData => ({\n    version: LYRICISTANT_FILE_VERSION,\n    createdWith: process.env.APP_VERSION,\n  });\n}\n\nconst loadV1 = async (archive: LyricsArchive): Promise<FileData> => {\n  const fileData: FileData = {\n    lyrics: (await archive.file(LYRICS_V1_FILE).async('string')) ?? '',\n  };\n\n  const extensions: SerializedExtensions = {};\n  const extensionDataFiles = archive.folder('extensions').filter(() => true);\n  for (const file of extensionDataFiles) {\n    const name = file.name\n      .replace(`${EXTENSIONS_FOLDER}/`, '')\n      .replace('.dat', '');\n    extensions[name] = await file.async('arraybuffer');\n  }\n\n  return {\n    extensions,\n    ...fileData,\n  };\n};\n","import { PlatformFile } from '@lyricistant/common/files/PlatformFile';\nimport { Buffers } from '@lyricistant/common-platform/files/Buffers';\nimport { FileData } from '@lyricistant/common-platform/files/Files';\nimport { FileHandler } from '@lyricistant/common-platform/files/handlers/FileHandler';\n\nexport class TextFileHandler implements FileHandler {\n  public extension = 'txt';\n\n  public constructor(private buffers: Buffers) {}\n\n  public canHandle = (file: PlatformFile): boolean =>\n    file?.type === 'text/plain' ||\n    file.metadata.name?.endsWith('txt') ||\n    file.metadata.path.endsWith('txt');\n\n  public create = async (file: FileData): Promise<ArrayBuffer> =>\n    this.buffers.stringToBuffer(file.lyrics);\n\n  public load = async (file: PlatformFile): Promise<FileData> => ({\n    lyrics: this.buffers.bufferToString(file.data),\n  });\n}\n","import type { HistoryDataV1 } from '@lyricistant/common-platform/history/FileHistory';\nimport {\n  HistoryData,\n  Change,\n  VersionedExtensionData,\n} from './FileDataExtension';\n\n// This file contains various extension related functions to enforce types.\n\nexport const isChange = (obj: any): obj is Change =>\n  ((obj !== null && typeof obj === 'object') || typeof obj === 'function') &&\n  (obj.type === -1 || obj.type === 0 || obj.type === 1) &&\n  typeof obj.line === 'number' &&\n  (typeof obj.value === 'string' || typeof obj.value === 'undefined');\n\nexport const isHistoryData = (obj: any): obj is HistoryData =>\n  ((obj !== null && typeof obj === 'object') || typeof obj === 'function') &&\n  typeof obj.time === 'string' &&\n  Array.isArray(obj.changes) &&\n  obj.changes.every((e: any) => isChange(e) as boolean);\n\nexport const isHistoryDataV1 = (obj: any): obj is HistoryDataV1 =>\n  ((obj !== null && typeof obj === 'object') || typeof obj === 'function') &&\n  typeof obj.time === 'string' &&\n  Array.isArray(obj.patches);\n\nexport const isVersionedExtensionData = (\n  obj: any\n): obj is VersionedExtensionData<any> =>\n  ((obj !== null && typeof obj === 'object') || typeof obj === 'function') &&\n  typeof obj.version === 'number';\n","import {\n  Chunk,\n  ChunkLine,\n} from '@lyricistant/common/history/ParsedHistoryData';\nimport { Change } from '@lyricistant/common-platform/files/extensions/FileDataExtension';\n\n/**\n * Create \"chunks\" of changed lines and context (non-changed lines that are near\n * changed lines.)\n *\n * @param source The text that the provided changes modify.\n * @param changes The changes to create chunks out of.\n * @see Chunk\n */\nexport const createChunks = (source: string, changes: Change[]): Chunk[] => {\n  if (!changes || changes.length === 0) {\n    return [\n      {\n        lines: [{ type: 'context', line: '<< No changes >>', control: true }],\n      },\n    ];\n  }\n  const sourceLines = source.split('\\n');\n\n  const groups: Change[][] = createChangeGroups(changes);\n\n  // Iterate over all groups and create displayable chunk lines for every chunk.\n  return groups.map((group) => {\n    const firstChange = group[0];\n    const lastChange = group[group.length - 1];\n\n    // Lines of context that are displayed before any changed lines, if possible.\n    const preLines: ChunkLine[] = createStartContext(sourceLines, firstChange);\n    // Lines of context that are displayed after any changed lines, if possible.\n    const postLines: ChunkLine[] = createEndContext(sourceLines, lastChange);\n\n    const chunkLines: ChunkLine[] = intRange(\n      firstChange.line,\n      lastChange.line + 1\n    )\n      .map((originalLineNumber): ChunkLine | ChunkLine[] => {\n        const sourceLineData = lineOrControlCharacters(\n          sourceLines[originalLineNumber]\n        );\n        const lineChanges = group.filter(\n          (change) => change.line === originalLineNumber\n        );\n        const changedLineData = lineOrControlCharacters(\n          applyToLine(sourceLineData?.line, lineChanges)\n        );\n\n        if (sourceLineData?.line !== changedLineData?.line) {\n          // Source line doesn't match the changed line; a modification happened.\n          if (\n            !sourceLineData?.line ||\n            (sourceLineData?.control && changedLineData?.line)\n          ) {\n            // There's no source line, or it was empty so don't bother with\n            // an \"old\" and just return the new line as an addition.\n            return {\n              type: 'new',\n              line: changedLineData.line,\n              control: changedLineData.control,\n            };\n          }\n\n          if (\n            !changedLineData?.line ||\n            (changedLineData?.control && sourceLineData?.line)\n          ) {\n            // There's no new line so display the old line as removed\n            return {\n              type: 'old',\n              line: sourceLineData.line,\n              control: sourceLineData.control,\n            };\n          }\n\n          return [\n            {\n              type: 'old',\n              line: sourceLineData.line,\n              control: sourceLineData.control,\n            },\n            {\n              type: 'new',\n              line: changedLineData.line,\n              control: changedLineData.control,\n            },\n          ];\n        } else {\n          // No changes, so this line is just context.\n          return {\n            type: 'context',\n            line: sourceLineData?.line ?? '<< Empty line >>',\n            control: sourceLineData?.control ?? true,\n          };\n        }\n      })\n      .reduce<ChunkLine[]>((total: ChunkLine[], curr) => {\n        // Flatten nested arrays.\n        if (Array.isArray(curr)) {\n          total.push(...curr);\n          return total;\n        }\n        total.push(curr);\n        return total;\n      }, []);\n\n    const lines = [\n      ...preLines,\n      ...groupSameTypeLines(chunkLines),\n      ...postLines,\n    ];\n\n    return {\n      lines,\n    };\n  });\n};\n\n/**\n * Given the lines of the source and the first change in a change group, create\n * lines of context that should be displayed before this change group.\n *\n * @param sourceLines Lines of the source text that firstChange will be applied to.\n * @param firstChange The first change in a change group.\n * @see createChangeGroups\n */\nconst createStartContext = (\n  sourceLines: string[],\n  firstChange: Change\n): ChunkLine[] => {\n  if (firstChange.line === 0) {\n    return [];\n  }\n\n  const startContextLineNumber = Math.max(firstChange.line - 2, 0);\n  // There are some lines we can display before the first group; add them.\n  return sourceLines\n    .slice(startContextLineNumber, firstChange.line)\n    .map((line): ChunkLine => {\n      const value = lineOrControlCharacters(line);\n      return {\n        type: 'context',\n        line: value.line,\n        control: value.control,\n      };\n    });\n};\n\n/**\n * Given the lines of the source and the last change in a change group, create\n * lines of context that should be displayed after this change group.\n *\n * @param sourceLines Lines of the source text that firstChange will be applied to.\n * @param lastChange The last change in a change group.\n * @see createChangeGroups\n */\nconst createEndContext = (\n  sourceLines: string[],\n  lastChange: Change\n): ChunkLine[] => {\n  const lines: ChunkLine[] = [];\n  const maxSourceLineIndex = sourceLines.length - 1;\n  if (lastChange.line < maxSourceLineIndex) {\n    const endContextLineNumber = Math.min(\n      lastChange.line + 2,\n      maxSourceLineIndex\n    );\n\n    // There are some lines we can display after the last group; add them.\n    lines.push(\n      ...sourceLines\n        .slice(lastChange.line + 1, endContextLineNumber)\n        .map((line): ChunkLine => {\n          const value = lineOrControlCharacters(line);\n          return {\n            type: 'context',\n            line: value.line,\n            control: value.control,\n          };\n        })\n    );\n  }\n  if (lastChange.line >= maxSourceLineIndex) {\n    lines.push({\n      type: 'context',\n      line: '<< End of file >>',\n      control: true,\n    });\n  }\n\n  return lines;\n};\n\n/**\n * Group changes that occur close together. Close together is defined by the\n * lines being modified by a change being within 3 lines of another change.\n *\n * @param changes The changes to group.\n */\nconst createChangeGroups = (changes: Change[]): Change[][] => {\n  const groups: Change[][] = [];\n  let groupIndex = 0;\n\n  // Group changes that are close together, so they can be displayed in the same chunk.\n  changes\n    .sort((a, b) => a.line - b.line)\n    .forEach((change, index) => {\n      if (index === 0) {\n        groups[groupIndex] = [change];\n        return;\n      }\n\n      const lastChange = changes[index - 1];\n\n      if (change.line - lastChange.line < 3) {\n        groups[groupIndex].push(change);\n      } else {\n        groupIndex += 1;\n        groups[groupIndex] = [change];\n      }\n    });\n\n  return groups;\n};\n\n/**\n * Applies all changes to the current line, even if they weren't orignally for this line.\n *\n * @param line The line to apply changes to.\n * @param changes The changes to apply.\n */\nconst applyToLine = (line: string, changes: Change[]): string => {\n  let result = line;\n  changes.forEach((change) => {\n    if (change.type === -1) {\n      result = null;\n    } else {\n      result = change.value;\n    }\n  });\n  return result;\n};\n\n/**\n * Potentially converts a line to be a \"control characters\" line, which means it\n * represents something that can be visibly represented as characters, like a\n * new line. If this line represents such characters, it will instead be\n * replaced and {@link control} will be true. Otherwise, the line will be\n * returned and {@link control will be false.} If line is null or undefined, this\n * will return null.\n *\n * @param line The line to check.\n */\nconst lineOrControlCharacters = (\n  line: string\n): { line: string; control: boolean } => {\n  if (line === undefined || line === null) {\n    return null;\n  }\n  if (line.length === 0) {\n    return { line: '<< Empty line >>', control: true };\n  }\n  return { line, control: false };\n};\n\n/**\n * Given a list of chunk lines, group lines that are of the same type so that\n * they are displayed after each other if they modifify consequtive lines.\n *\n * That is to say, if {@link lines} looks like:\n *\n * ```typescript\n * [{ type: 'old' }, { type: 'new' }, { type: 'old' }, { type: 'new' }];\n * ```\n *\n * It will become:\n *\n * ```typescript\n * [{ type: 'old' }, { type: 'old' }, { type: 'new' }, { type: 'new' }];\n * ```\n *\n * This will only affect consecutive alternating lines. A multiple olds, news,\n * or any contexts will end the grouping.\n *\n * @param lines\n */\nconst groupSameTypeLines = (lines: ChunkLine[]): ChunkLine[] => {\n  const result: ChunkLine[] = [];\n  let lastType: ChunkLine['type'] = null;\n  let currentGroup: ChunkLine[] = null;\n\n  const endGrouping = () => {\n    currentGroup.sort((left, right) => {\n      if (left.type === 'old' && right.type === 'new') {\n        return -1;\n      } else if (right.type === 'old' && left.type === 'new') {\n        return 1;\n      }\n      return 0;\n    });\n    result.push(...currentGroup);\n    lastType = null;\n    currentGroup = null;\n  };\n\n  for (const line of lines) {\n    if (line.type === 'context') {\n      if (currentGroup != null) {\n        endGrouping();\n      }\n      result.push(line);\n      continue;\n    }\n\n    if (!lastType) {\n      currentGroup = [line];\n      lastType = line.type;\n      continue;\n    }\n\n    currentGroup.push(line);\n    lastType = line.type;\n  }\n\n  if (currentGroup) {\n    endGrouping();\n  }\n\n  return result;\n};\n\nconst intRange = (start: number, end: number): number[] =>\n  [...Array(end - start).keys()].map((i) => i + start);\n","import { DateTime } from 'luxon';\n\nexport const MED_WITH_SECONDS: Intl.DateTimeFormatOptions =\n  DateTime.DATETIME_MED_WITH_SECONDS;\n","import {\n  Chunk,\n  ParsedHistoryData,\n} from '@lyricistant/common/history/ParsedHistoryData';\nimport { Logger } from '@lyricistant/common/Logger';\nimport {\n  Change,\n  FileDataExtension,\n  HistoryData,\n  onVersion,\n} from '@lyricistant/common-platform/files/extensions/FileDataExtension';\nimport {\n  isHistoryData,\n  isHistoryDataV1,\n} from '@lyricistant/common-platform/files/extensions/FileDataExtension.guard';\nimport { createChunks } from '@lyricistant/common-platform/history/ChunkCreation';\nimport { Clock } from '@lyricistant/common-platform/time/Clock';\nimport { MED_WITH_SECONDS } from '@lyricistant/common-platform/time/Formats';\nimport type { patch_obj } from 'diff-match-patch';\n\nconst CURRENT_VERSION = 2;\n\n/** @deprecated Used for the V1 version of File History. Use {@link HistoryData} instead. */\nexport interface HistoryDataV1 {\n  time: string;\n  patches: patch_obj[];\n}\nexport class FileHistory implements FileDataExtension<'history'> {\n  private static readonly MAX_DELTA_SIZE = 100;\n  public key = 'history' as const;\n\n  private delta: HistoryData[] = [];\n  private lastKnownLyrics = '';\n\n  public constructor(private clock: Clock, private logger: Logger) {}\n\n  public onBeforeSerialization = (lyrics: string) => {\n    this.add(lyrics);\n  };\n\n  public serialize = async () => ({\n    version: CURRENT_VERSION,\n    data: this.delta,\n  });\n\n  public deserialize = async (extensionData: any) => {\n    this.lastKnownLyrics = '';\n\n    this.delta = await this.loadFromSerialized(extensionData);\n    this.lastKnownLyrics = this.getParsedHistory();\n  };\n\n  public reset = () => {\n    this.lastKnownLyrics = '';\n    this.delta = [];\n  };\n\n  public isNonEmptyHistory = async (extensionData: any): Promise<boolean> =>\n    (await this.loadFromSerialized(extensionData)).length > 0;\n\n  public add = (lyrics: string) => {\n    if (lyrics.trim() === this.lastKnownLyrics || lyrics.trim().length === 0) {\n      return;\n    }\n\n    this.logger.verbose('Adding file history', {\n      new: lyrics,\n      old: this.lastKnownLyrics,\n    });\n\n    const changes = this.createChanges(this.lastKnownLyrics, lyrics);\n    this.delta.push({\n      changes,\n      time: this.clock.now().formatIso(),\n    });\n\n    if (this.delta.length > FileHistory.MAX_DELTA_SIZE) {\n      const first = this.applyChanges('', this.delta[0].changes);\n      const second = this.applyChanges(first, this.delta[1].changes);\n      const newChanges = this.createChanges('', second);\n      this.delta.splice(0, 2, {\n        changes: newChanges,\n        time: this.delta[1].time,\n      });\n    }\n    this.lastKnownLyrics = lyrics;\n  };\n\n  public getIncrementalParsedHistory = (options?: {\n    /**\n     * Whether to include chunk generation, which can be very expensive.\n     * {@link base} will be used to compare all chunks against when showing changes.\n     */\n    includeChunks?: { base: string };\n  }): ParsedHistoryData[] => {\n    let last = '';\n\n    return this.delta\n      .map((data) => {\n        const text = this.applyChanges(last, data.changes);\n        let chunks: Chunk[];\n        if (options?.includeChunks) {\n          chunks = createChunks(\n            options.includeChunks.base,\n            this.createChanges(options.includeChunks.base, text)\n          );\n        } else {\n          chunks = [];\n        }\n        last = text;\n\n        return {\n          time: this.clock.fromIso(data.time).formatLocal(MED_WITH_SECONDS),\n          text,\n          chunks,\n        };\n      })\n      .reverse();\n  };\n\n  public getParsedHistory = (): string => {\n    if (this.lastKnownLyrics.length > 0) {\n      return this.lastKnownLyrics;\n    }\n\n    const incrementalHistory = this.getIncrementalParsedHistory();\n    this.lastKnownLyrics = incrementalHistory[0]?.text?.trim() ?? '';\n\n    return this.lastKnownLyrics;\n  };\n\n  private loadFromSerialized = async (\n    extensionData: unknown\n  ): Promise<HistoryData[]> =>\n    await onVersion(extensionData, this.logger, {\n      1: async (data) => this.migrateV1ToV2(await this.loadV1(data)),\n      2: (data) => this.loadV2(data),\n      invalid: () => [],\n    });\n\n  private loadV1 = async (data: unknown): Promise<HistoryDataV1[]> => {\n    if (typeof data !== 'string') {\n      this.logger.warn('Invalid history data', data);\n      return [];\n    }\n\n    if (data.trim().length === 0) {\n      return [];\n    }\n\n    // V1 included an extra unnecessary JSON stringify.\n    const historyDataV1 = JSON.parse(data);\n    if (\n      Array.isArray(historyDataV1) &&\n      historyDataV1.every((datum) => !isHistoryDataV1(datum))\n    ) {\n      this.logger.warn('Invalid history data', historyDataV1);\n      return [];\n    }\n    return historyDataV1;\n  };\n\n  private loadV2 = async (data: unknown): Promise<HistoryData[]> => {\n    if (!Array.isArray(data) || !data.every((datum) => isHistoryData(datum))) {\n      return [];\n    }\n\n    return data;\n  };\n\n  private migrateV1ToV2 = async (\n    data: HistoryDataV1[]\n  ): Promise<HistoryData[]> => {\n    let last = '';\n\n    // Use an async import, so we don't have to pay the cost of loading this in\n    // when people no longer have V1 File History.\n    const DiffMatchPatch = (await import('diff-match-patch')).default\n      .diff_match_patch;\n\n    const differ = new DiffMatchPatch();\n    return data.map((historyData) => {\n      const newText = differ.patch_apply(historyData.patches, last)[0];\n      const changes = this.createChanges(last, newText);\n\n      const result = {\n        time: historyData.time,\n        changes,\n      };\n      last = newText;\n      return result;\n    });\n  };\n\n  /**\n   * Given a source and an expected result, create a list of {@link Change}\n   * objects that can be given to {@link applyChanges} along with the same source\n   * to get the same result.\n   *\n   * @param source The starting point.\n   * @param result The string that will be recreated when the returned changes\n   *   are applied.\n   */\n  private createChanges = (source: string, result: string): Change[] => {\n    const sourceLines = source.split('\\n');\n    const resultLines = result.split('\\n');\n    const changes: Change[] = [];\n    // How many lines we expect the \"result\" string to be off from the \"source\"\n    // string. Used so that when finding changes, we can avoid having to say that\n    // every subsequent line has changed after a single addition or subtraction.\n    let expectedOffset = 0;\n\n    sourceLines.forEach((sourceLine, originalSourceLineIndex) => {\n      const sourceLineIndex = originalSourceLineIndex + expectedOffset;\n      const resultIndex = resultLines.indexOf(sourceLine, sourceLineIndex);\n\n      if (resultIndex >= 0) {\n        // We've found the source line in the result. Everything in between must\n        // be additions.\n        const additions = resultLines.slice(sourceLineIndex, resultIndex).map(\n          (line, additionIndex): Change => ({\n            type: 1,\n            line: sourceLineIndex + additionIndex,\n            value: line,\n          })\n        );\n        changes.push(...additions);\n        expectedOffset += additions.length;\n      } else {\n        if (sourceLineIndex < resultLines.length) {\n          // If the result has a line at the same index, then we actually\n          // changed this line so mark it as being modified.\n          changes.push({\n            type: 0,\n            line: sourceLineIndex,\n            value: resultLines[sourceLineIndex],\n          });\n        } else {\n          // We weren't able to find the source like in the result and there's\n          // no change at the same line, so the source must have been removed.\n          changes.push({\n            type: -1,\n            line: sourceLineIndex,\n          });\n        }\n      }\n    });\n\n    // Any lines left over in result that occur after where source ends\n    // (factoring in the offset) must all be additions, so add those here.\n    changes.push(\n      ...resultLines.slice(sourceLines.length + expectedOffset).map(\n        (line, additionIndex): Change => ({\n          type: 1,\n          line: sourceLines.length + additionIndex + expectedOffset,\n          value: line,\n        })\n      )\n    );\n\n    return changes;\n  };\n\n  private applyChanges = (source: string, changes: Change[]): string => {\n    const sourceLines = source.split('\\n');\n\n    changes.forEach((change) => {\n      if (change.type === 1) {\n        if (\n          change.line < sourceLines.length &&\n          sourceLines[change.line] == null\n        ) {\n          // Instead of unnecessarily resizing the array, just replace any nulls\n          // in the same line with the added value.\n          sourceLines[change.line] = change.value;\n        } else {\n          // Add the line to the source by shifting the array down to make room.\n          sourceLines.splice(change.line, 0, change.value);\n        }\n      } else {\n        // For removals and modifications, we change the line directly. Removals\n        // are marked as null instead of forcing an array resize; it'll be\n        // removed later.\n        sourceLines[change.line] = change.type === 0 ? change.value : null;\n      }\n    });\n\n    return sourceLines.filter((line) => typeof line === 'string').join('\\n');\n  };\n}\n","/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { Logger } from '@lyricistant/common/Logger';\nimport { Serializable } from '@lyricistant/common/Serializable';\nimport { isVersionedExtensionData } from '@lyricistant/common-platform/files/extensions/FileDataExtension.guard';\n\nexport type HistoryData = {\n  time: string;\n  changes: Change[];\n};\n\n/**\n * Represents a change to a line in text.\n *\n * Make sure that any changes made here are also reflected in the\n * {@link isChange} method as well, since that is used to validate if an object\n * is a change or not.\n */\nexport type Change = {\n  /** The type of the change. -1 is removed, 0 is modified, and 1 is added. */\n  type: -1 | 0 | 1;\n  /** The line number this change is for. */\n  line: number;\n  /** The new value of the line. Only available when {@link type} is 0 or 1. * */\n  value?: string;\n};\n\n/**\n * Extensions are defined as optional data for secondary functionality in\n * Lyricistant, such as the history of changes within the represented file (like\n * the File History feature).\n *\n * When adding a new extension, create a new key here, create a new\n * implementation of {@link FileDataExtension} for your new key, and provide your\n * new implementation as a {@link FileDataExtensions} in {@link registerCommonPlatform}.\n */\nexport interface ExtensionData extends Record<string, Serializable> {\n  history?: HistoryData[];\n}\nexport type FileDataExtensionKey = keyof ExtensionData;\n\n/** Represents some serialized data for a file extension that has an associated version. */\nexport interface VersionedExtensionData<\n  KeyT extends FileDataExtensionKey,\n  DataT = ExtensionData[KeyT]\n> {\n  version: number;\n  data?: DataT;\n}\n\n/**\n * Given some versioned extension data and an object mapping versions to\n * functions, call the appropriate version handler function.\n *\n * For instance, if your extension data can be either version 1, 2, or 3, you\n * might call this function like so:\n *\n * ```javascript\n * onVersion(\n *   extensionData,\n *   {\n *     1: () -> loadV1(extensionData.data),\n *     2: () -> loadV2(extensionData.data),\n *     3: () -> loadV3(extensionData.data),\n *     invalid: () -> setDefault()\n *   }\n * )\n * ```\n *\n * If the version of the extension data supplied does not have a handler, or if\n * the extension data does not have a version, then the invalid handler will be called.\n *\n * @param extensionData The extension data to check\n * @param logger A logger\n * @param handlers An object mapping versions to handler functions.\n */\nexport const onVersion = async <R = void>(\n  extensionData: any,\n  logger: Logger,\n  handlers: {\n    [version: number]: (data: unknown) => R | Promise<R>;\n    invalid: () => R | Promise<R>;\n  }\n): Promise<R> => {\n  if (!isVersionedExtensionData(extensionData)) {\n    logger.warn(\n      \"Tried to load extension data that didn't conform to the VersionedExtensionData type.\",\n      extensionData\n    );\n    return handlers.invalid();\n  }\n  const version = extensionData?.version;\n\n  if (version && version in handlers) {\n    try {\n      return handlers[version](extensionData.data);\n    } catch (e) {\n      logger.warn('Exception when handling extension data', extensionData, e);\n      return handlers.invalid();\n    }\n  } else {\n    logger.warn(\n      'No handler registered to handle extension data',\n      extensionData\n    );\n    return handlers.invalid();\n  }\n};\n\n/** Represents an optional extension onto {@link FileData}. */\nexport interface FileDataExtension<\n  KeyT extends FileDataExtensionKey = FileDataExtensionKey\n> {\n  readonly key: KeyT;\n  /**\n   * Calls right before {@link serialize} will be called to give the extension a\n   * change to prepare itself.\n   *\n   * @param lyrics The current lyrics the user has edited.\n   */\n  onBeforeSerialization?: (lyrics: string) => void;\n\n  /**\n   * Serialize this extension's state to in a JSON-compatible format such that\n   * when {@link deserialize} is called with the data returned from this\n   * function, this extension will have the same state as before.\n   */\n  serialize: () => Promise<VersionedExtensionData<KeyT>>;\n\n  /**\n   * Deserialize and restore the state of this extension from the provided {@link data}\n   *\n   * It is possible that this data isn't the same as what was previously\n   * returned from {@link serialize} (in the case where a user has manually\n   * modified the data on their platform), so take care to validate that it\n   * matches your expectation.\n   *\n   * This is allowed to throw an exception in exceptional cases, but prefer to\n   * instead restore to some empty state, as throwing will cause the file to\n   * completely to load.\n   *\n   * @param data The result of a previous {@link serialize} call.\n   */\n  deserialize: (data: unknown) => Promise<void>;\n\n  /** Reset this extension back to its default state. */\n  reset: () => void;\n}\n\nexport type FileDataExtensions = FileDataExtension[];\n","import { isUnderTest } from '@lyricistant/common/BuildModes';\nimport { RendererDelegate } from '@lyricistant/common/Delegates';\nimport { Logger } from '@lyricistant/common/Logger';\nimport { AppData } from '@lyricistant/common-platform/appdata/AppData';\nimport { Buffers } from '@lyricistant/common-platform/files/Buffers';\nimport { FileDataExtensions } from '@lyricistant/common-platform/files/extensions/FileDataExtension';\nimport { FileManager } from '@lyricistant/common-platform/files/FileManager';\nimport { Files } from '@lyricistant/common-platform/files/Files';\nimport { FileHandlers } from '@lyricistant/common-platform/files/handlers/FileHandler';\nimport { LyricistantFileHandler } from '@lyricistant/common-platform/files/handlers/LyricistantFileHandler';\nimport { TextFileHandler } from '@lyricistant/common-platform/files/handlers/TextFileHandler';\nimport { RecentFiles } from '@lyricistant/common-platform/files/RecentFiles';\nimport { UnsavedDataManager } from '@lyricistant/common-platform/files/UnsavedDataManager';\nimport { FirstLaunchManager } from '@lyricistant/common-platform/firstlaunch/FirstLaunchManager';\nimport { FileHistory } from '@lyricistant/common-platform/history/FileHistory';\nimport { FileHistoryManager } from '@lyricistant/common-platform/history/FileHistoryManager';\nimport { LogManager } from '@lyricistant/common-platform/logging/LogManager';\nimport { PlatformLogger } from '@lyricistant/common-platform/logging/PlatformLogger';\nimport { Manager } from '@lyricistant/common-platform/Manager';\nimport { Managers } from '@lyricistant/common-platform/Managers';\nimport { PreferenceManager } from '@lyricistant/common-platform/preferences/PreferenceManager';\nimport { Preferences } from '@lyricistant/common-platform/preferences/Preferences';\nimport { SystemThemeProvider } from '@lyricistant/common-platform/theme/SystemThemeProvider';\nimport {\n  Clock,\n  FakeClock,\n  RealClock,\n} from '@lyricistant/common-platform/time/Clock';\nimport { Times } from '@lyricistant/common-platform/time/Times';\nimport { UiConfigManager } from '@lyricistant/common-platform/ui/UiConfigManager';\nimport {\n  TitleFormatter,\n  UiConfigProvider,\n} from '@lyricistant/common-platform/ui/UiConfigProviders';\nimport { DIContainer } from '@wessberg/di';\n\nexport type Provider<T> = () => T;\n\nexport interface PlatformDependencies {\n  rendererDelegate: Provider<RendererDelegate>;\n  files: Provider<Files>;\n  logger: Provider<PlatformLogger>;\n  preferences: Provider<Preferences>;\n  recentFiles: Provider<RecentFiles>;\n  systemThemeProvider: Provider<SystemThemeProvider>;\n  appData: Provider<AppData>;\n  buffers: Provider<Buffers>;\n  uiConfigProvider: Provider<UiConfigProvider>;\n  titleFormatter: Provider<TitleFormatter>;\n  times: Provider<Times>;\n}\n\n/**\n * Registers all the common managers plus any extra managers that are passed in\n * so that they can be retrieved by querying `component` for {@link Managers}.\n *\n * Note: This should always be invoked after {@link registerCommonPlatform}.\n *\n * @param component The component to register the managers to.\n * @param extraManagers Extra managers the platform would like to register as well.\n */\nexport const registerCommonManagers = (\n  component: DIContainer,\n  ...extraManagers: Manager[]\n) => {\n  component.registerSingleton<Managers>(() => [\n    component.get<FileManager>(),\n    component.get<PreferenceManager>(),\n    component.get<UiConfigManager>(),\n    component.get<UnsavedDataManager>(),\n    component.get<LogManager>(),\n    component.get<FileHistoryManager>(),\n    component.get<FirstLaunchManager>(),\n    ...extraManagers,\n  ]);\n};\n\n/**\n * Register the necessary functionality and the dependencies for that\n * functionality for the common platform.\n *\n * @param dependencies The platform implementations of dependencies the common\n *   platform needs.\n * @param component The DI container to register to.\n */\nexport const registerCommonPlatform = (\n  dependencies: PlatformDependencies,\n  component: DIContainer\n): DIContainer => {\n  component.registerTransient<Files>(dependencies.files);\n  component.registerTransient<Logger>(dependencies.logger);\n  component.registerTransient<PlatformLogger>(dependencies.logger);\n  component.registerTransient<Preferences>(dependencies.preferences);\n  component.registerTransient<RecentFiles>(dependencies.recentFiles);\n  component.registerTransient<SystemThemeProvider>(\n    dependencies.systemThemeProvider\n  );\n  component.registerTransient<AppData>(dependencies.appData);\n  component.registerTransient<Buffers>(dependencies.buffers);\n  component.registerTransient<UiConfigProvider>(dependencies.uiConfigProvider);\n  component.registerTransient<TitleFormatter>(dependencies.titleFormatter);\n  component.registerTransient<RendererDelegate>(dependencies.rendererDelegate);\n  component.registerTransient<Times>(dependencies.times);\n\n  component.registerSingleton<FileManager>();\n  component.registerSingleton<PreferenceManager>();\n  component.registerSingleton<UiConfigManager>();\n  component.registerSingleton<UnsavedDataManager>();\n  component.registerSingleton<LogManager>();\n  component.registerSingleton<FileHistoryManager>();\n  component.registerSingleton<FirstLaunchManager>();\n\n  if (isUnderTest) {\n    component.registerSingleton<Clock, FakeClock>();\n  } else {\n    component.registerSingleton<Clock, RealClock>();\n  }\n\n  component.registerSingleton<LyricistantFileHandler>();\n  component.registerSingleton<TextFileHandler>();\n\n  component.registerSingleton<FileHistory>();\n\n  component.registerSingleton<FileDataExtensions>(() => [\n    component.get<FileHistory>(),\n  ]);\n\n  component.registerSingleton<FileHandlers>(() => [\n    component.get<LyricistantFileHandler>(),\n    component.get<TextFileHandler>(),\n  ]);\n  return component;\n};\n","import {\n  TitleFormatter,\n  UiConfigProvider,\n} from '@lyricistant/common-platform/ui/UiConfigProviders';\n\nexport const provideUiConfig: UiConfigProvider = () => ({\n  showDownload: true,\n  showOpen: !!Blob && !!File,\n  showBrowserWarning: true,\n  promptOnUrlChange: true,\n});\n\nexport const formatTitle: TitleFormatter = (filename: string) => {\n  if (filename && filename.trim().length > 0) {\n    return `Lyricistant - ${filename}`;\n  }\n  return 'Lyricistant';\n};\n","import {\n  registerCommonManagers,\n  registerCommonPlatform,\n} from '@lyricistant/common-platform/AppComponents';\nimport { DOMBuffers } from '@lyricistant/core-dom-platform/platform/DOMBuffers';\nimport { DOMSystemThemeProvider } from '@lyricistant/core-dom-platform/platform/DOMSystemThemeProvider';\nimport { DOMTimes } from '@lyricistant/core-dom-platform/platform/DOMTimes';\nimport {\n  formatTitle,\n  provideUiConfig,\n} from '@lyricistant/core-dom-platform/platform/UiConfigProvider';\nimport { UnloadManager } from '@lyricistant/core-dom-platform/platform/UnloadManager';\nimport { WebAppData } from '@web-platform/implementations/WebAppData';\nimport { WebFiles } from '@web-platform/implementations/WebFiles';\nimport { WebLogger } from '@web-platform/implementations/WebLogger';\nimport { WebPreferences } from '@web-platform/implementations/WebPreferences';\nimport { WebRecentFiles } from '@web-platform/implementations/WebRecentFiles';\nimport { DIContainer } from '@wessberg/di';\nimport { WebRendererDelegate } from './RendererDelegate';\n\nconst createComponent = (): DIContainer => {\n  const component = new DIContainer();\n\n  component.registerSingleton<WebRendererDelegate>();\n  component.registerSingleton<WebLogger>();\n  component.registerSingleton<WebPreferences>();\n  component.registerSingleton<WebRecentFiles>();\n  component.registerSingleton<WebAppData>();\n  component.registerSingleton<WebFiles>();\n  component.registerSingleton<DOMSystemThemeProvider>();\n  component.registerSingleton<DOMBuffers>();\n  component.registerSingleton<DOMTimes>();\n\n  registerCommonPlatform(\n    {\n      rendererDelegate: () => component.get<WebRendererDelegate>(),\n      logger: () => component.get<WebLogger>(),\n      files: () => component.get<WebFiles>(),\n      preferences: () => component.get<WebPreferences>(),\n      titleFormatter: () => formatTitle,\n      buffers: () => component.get<DOMBuffers>(),\n      appData: () => component.get<WebAppData>(),\n      systemThemeProvider: () => component.get<DOMSystemThemeProvider>(),\n      recentFiles: () => component.get<WebRecentFiles>(),\n      uiConfigProvider: () => provideUiConfig,\n      times: () => component.get<DOMTimes>(),\n    },\n    component\n  );\n  component.registerSingleton<UnloadManager>();\n\n  registerCommonManagers(component, component.get<UnloadManager>());\n  return component;\n};\n\nexport const appComponent = createComponent();\n","import { RendererDelegate } from '@lyricistant/common/Delegates';\nimport { Logger } from '@lyricistant/common/Logger';\nimport { Manager } from '@lyricistant/common-platform/Manager';\nimport { Managers } from '@lyricistant/common-platform/Managers';\nimport { renderer } from '@web-platform/renderer';\nimport { expose, proxy } from 'comlink';\nimport { appComponent } from './AppComponent';\nimport { WebRendererDelegate } from './RendererDelegate';\n\nself.onerror = (error) => {\n  const availableLogger = appComponent?.get<Logger>() ?? console;\n  availableLogger.error('Web Platform crashed', error);\n\n  if (error instanceof ErrorEvent) {\n    renderer.onError(error.error);\n  } else if (typeof error === 'string') {\n    renderer.onError(error);\n  } else {\n    renderer.onError(error);\n  }\n};\nself.onunhandledrejection = (error) => {\n  self.onerror(error.reason);\n};\n\nconst start = () => {\n  try {\n    appComponent\n      .get<Managers>()\n      .forEach((manager: Manager) => manager.register());\n  } catch (e) {\n    self.onerror(e);\n  }\n};\n\nconst getRendererDelegate = () =>\n  appComponent.get<RendererDelegate>() as WebRendererDelegate;\n\nexport const receive = (channel: string, args: any[]) => {\n  getRendererDelegate().receive(channel, args);\n};\n\nconst getLogger = () => {\n  const logger = appComponent.get<Logger>();\n  return proxy(logger);\n};\n\nexport const onRendererListenerSet = (channel: string) => {\n  getRendererDelegate().onRendererListenerSet(channel);\n};\n\nexpose({\n  receive,\n  onRendererListenerSet,\n  getLogger,\n  start,\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [313], () => (__webpack_require__(3847)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".renderer.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t745: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunklyricistant\"] = self[\"webpackChunklyricistant\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","leafPrototypes","getProto","next","renderer","self","logMessages","Subject","pipe","map","messageParts","toDownloadableLogMessage","bufferCount","subscribe","messages","logToSessionStorage","level","message","args","date","local","toFormat","text","arg","JSON","stringify","join","sprintf","getLogs","parse","sessionStorage","getItem","currentLogs","push","setItem","logger","debug","console","error","verbose","log","warn","info","getPrintedLogs","complete","logs","ListenerManager","listeners","Map","addListener","channel","listener","registeredListeners","this","getListeners","set","removeListener","splice","indexOf","get","isError","e","Error","platformListeners","rendererListeners","newRendererListenerListeners","send","functions","forEach","queue","on","value","WebRendererDelegate","rendererListenerSetListeners","receive","Promise","resolve","catch","reason","onRendererListenerSet","addRendererListenerSetListener","WebLogger","clock","formatMessage","maybeAddToCache","flush","then","getAllLogs","getSessionStorage","storage","force","length","now","formatIso","WebPreferences","prefsKey","setPreferences","data","getLocalStorage","getPreferences","savedPrefs","WebRecentFiles","getRecentFiles","setRecentFiles","WebAppData","key","exists","delete","removeItem","WebFiles","handles","openFile","file","metadata","path","extras","handle","fs","getFileSystem","result","type","saveFile","defaultFileName","cancelled","returnedPath","name","SystemTheme","DOMSystemThemeProvider","onChange","setColorSchemeListener","matchMedia","matches","Dark","Light","window","addEventListener","decoder","TextDecoder","encoder","TextEncoder","DOMBuffers","bufferToString","buffer","decode","stringToBuffer","input","encode","DOMTimes","elapsed","performance","YES_NO_BUTTONS","getEditorText","rendererDelegate","onEditorText","showRendererDialog","onInteraction","clickArgs","onClose","UnsavedDataManager","fileManager","appData","fileHistory","times","lastFileSaveMs","hasPromptedUnsavedDataRecovery","register","setInitialFileLoadedListener","checkForUnsavedData","onEditorIdle","addOnFileChangedListener","UNSAVED_LYRICS_KEY","isNonEmptyHistory","getUnsavedData","dialogTag","interactionData","tag","RECOVER_UNSAVED_LYRICS_TAG","title","buttons","onDialogClicked","selectedButton","startAutomaticFileSaver","buttonLabel","deserialize","undefined","getParsedHistory","canPerformFileSave","performFileSave","setTimeout","onAutomaticFileSaveTriggered","AUTOMATIC_FILE_SAVE_MS","add","serialize","MINIMUM_FILE_SAVE_ELAPSED_TIME_MS","UnloadManager","CancelError","super","CancelSignalImpl","isCancelled","addOnCancelListener","onCancel","cancel","Cancellable","signal","makeCancellable","promise","reject","ColorScheme","Font","RhymeSource","DefaultFileType","DetailPaneVisibility","getPreferencesDataOrDefault","preferences","savedPreferencesData","textSize","colorScheme","System","rhymeSource","Datamuse","font","Roboto","defaultFileType","Always_Ask","detailPaneVisibility","Always_Show","getDefaultPreferences","FileManager","files","buffers","recentFiles","fileHandlers","fileDataExtensions","initialFile","currentFile","fileChangedListeners","initialFileLoadedListener","isRendererReady","onNewFile","isFileModified","modified","onPromptSaveFileForNew","createNewFile","onOpenFile","onPromptSaveFileForOpen","onSaveFile","forceSaveAs","showLoadingDialog","filePath","saveFileActual","cancelSignal","platformFile","openFileActual","OPEN_FILE_DIALOG_TAG","onRendererReady","onRendererSaveFile","lyrics","extension","onBeforeSerialization","extensions","fileHandler","handler","getDefaultFileHandler","serializedFileData","create","newFileMetadata","fileTitle","addRecentFile","SAVE_FILE_DIALOG_TAG","fileData","createFileData","reset","updatedRecentFiles","CONFIRM_NEW_FILE_TAG","CONFIRM_OPEN_FILE_TAG","recentlyOpenedFiles","unshift","Array","from","Set","pop","find","it","canHandle","load","cancelable","progress","cancellable","onDialogClosed","closedTag","promptFileHandlerSelection","lyricsHandler","textHandler","textOption","neverAskAgainLabel","CHOOSE_FILE_HANDLER_TAG","checkbox","label","options","checkboxes","preferencesData","selectedOption","Plain_Text","Lyricistant_Lyrics","textFileHandler","lyricsFileHandler","PreferenceManager","systemThemeProvider","onThemeChangedListeners","addThemeChangedListener","onSavePrefs","sendThemeUpdate","normalizeColorScheme","systemPalette","systemThemeToTheme","systemTheme","palette","theme","UiConfigManager","provideUiConfig","formatTitle","filename","LogManager","FileHistoryManager","getIncrementalHistory","getIncrementalParsedHistory","includeChunks","base","history","FirstLaunchManager","onReadyForEvents","isDeepLink","IS_FIRST_LAUNCH_KEY","createInstant","dateTime","locale","zone","formatLocal","option","toLocaleString","timeZone","toISO","RealClock","fromIso","isoString","fromISO","LYRICS_EXTENSION","LYRICS_V1_FILE","LyricistantFileHandler","isEqual","Uint8Array","subarray","endsWith","archive","loadAsync","version","createdWith","readVersion","loadV1","createVersion","folder","Object","keys","filter","generateAsync","async","extensionDataFiles","replace","TextFileHandler","lineOrControlCharacters","line","control","groupSameTypeLines","lines","lastType","currentGroup","endGrouping","sort","left","right","MED_WITH_SECONDS","DATETIME_MED_WITH_SECONDS","FileHistory","delta","lastKnownLyrics","extensionData","loadFromSerialized","trim","new","old","changes","createChanges","time","MAX_DELTA_SIZE","first","applyChanges","second","newChanges","last","chunks","source","sourceLines","split","groups","groupIndex","a","b","change","index","lastChange","createChangeGroups","group","firstChange","preLines","startContextLineNumber","Math","max","slice","createStartContext","postLines","maxSourceLineIndex","endContextLineNumber","min","createEndContext","chunkLines","start","end","i","originalLineNumber","sourceLineData","lineChanges","changedLineData","applyToLine","reduce","total","curr","isArray","createChunks","reverse","incrementalHistory","handlers","obj","invalid","onVersion","migrateV1ToV2","loadV2","historyDataV1","every","datum","patches","isHistoryData","isChange","differ","DiffMatchPatch","default","diff_match_patch","historyData","newText","patch_apply","resultLines","expectedOffset","sourceLine","originalSourceLineIndex","sourceLineIndex","resultIndex","additions","additionIndex","showDownload","showOpen","Blob","File","showBrowserWarning","promptOnUrlChange","appComponent","component","registerSingleton","dependencies","registerTransient","uiConfigProvider","titleFormatter","registerCommonPlatform","extraManagers","registerCommonManagers","createComponent","onerror","ErrorEvent","onError","onunhandledrejection","getRendererDelegate","getLogger","manager","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","r","n","getter","__esModule","d","getPrototypeOf","t","mode","ns","def","current","getOwnPropertyNames","definition","o","defineProperty","enumerable","f","chunkId","all","promises","u","g","globalThis","Function","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","p","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime"],"sourceRoot":""}